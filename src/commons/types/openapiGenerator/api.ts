/* tslint:disable */
/* eslint-disable */
/**
 * BookBLA API Document
 * 북블라 API 문서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdminLoginRequest
 */
export interface AdminLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminLoginRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminLoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AdminLoginResponse
 */
export interface AdminLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof AdminLoginResponse
     */
    'sessionId'?: string;
}
/**
 * 
 * @export
 * @interface AdminLogoutRequest
 */
export interface AdminLogoutRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminLogoutRequest
     */
    'sessionId': string;
}
/**
 * 
 * @export
 * @interface AdminMemberNotificationRequest
 */
export interface AdminMemberNotificationRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminMemberNotificationRequest
     */
    'memberId': number;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberNotificationRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberNotificationRequest
     */
    'contents': string;
}
/**
 * 
 * @export
 * @interface AdminMemberProfileStatusResponse
 */
export interface AdminMemberProfileStatusResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminMemberProfileStatusResponse
     */
    'memberStudentIdStatuses'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminMemberProfileStatusResponse
     */
    'memberVerifyStatuses'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AdminMemberProfileStudentIdStatusUpdateRequest
 */
export interface AdminMemberProfileStudentIdStatusUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminMemberProfileStudentIdStatusUpdateRequest
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberProfileStudentIdStatusUpdateRequest
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface AdminMemberReadResponse
 */
export interface AdminMemberReadResponse {
    /**
     * 
     * @type {number}
     * @memberof AdminMemberReadResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'authEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'memberType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'schoolEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberReadResponse
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AdminMemberReadResponses
 */
export interface AdminMemberReadResponses {
    /**
     * 
     * @type {number}
     * @memberof AdminMemberReadResponses
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<AdminMemberReadResponse>}
     * @memberof AdminMemberReadResponses
     */
    'data'?: Array<AdminMemberReadResponse>;
}
/**
 * 
 * @export
 * @interface AdminMemberStudentIdResponse
 */
export interface AdminMemberStudentIdResponse {
    /**
     * 
     * @type {number}
     * @memberof AdminMemberStudentIdResponse
     */
    'memberVerifyId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminMemberStudentIdResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'schoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'studentIdImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminMemberStudentIdResponse
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface AdminMemberStudentIdResponses
 */
export interface AdminMemberStudentIdResponses {
    /**
     * 
     * @type {number}
     * @memberof AdminMemberStudentIdResponses
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<AdminMemberStudentIdResponse>}
     * @memberof AdminMemberStudentIdResponses
     */
    'data'?: Array<AdminMemberStudentIdResponse>;
}
/**
 * 
 * @export
 * @interface AdminNotificationRequest
 */
export interface AdminNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminNotificationRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdminNotificationRequest
     */
    'contents': string;
}
/**
 * 
 * @export
 * @interface AgreedStatuses
 */
export interface AgreedStatuses {
    /**
     * 
     * @type {boolean}
     * @memberof AgreedStatuses
     */
    'adAgreementPolicy'?: boolean;
}
/**
 * 
 * @export
 * @interface AppleNotificationRequest
 */
export interface AppleNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof AppleNotificationRequest
     */
    'signedPayload'?: string;
}
/**
 * 
 * @export
 * @interface ApplePaymentInAppPurchaseRequest
 */
export interface ApplePaymentInAppPurchaseRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplePaymentInAppPurchaseRequest
     */
    'transactionId': string;
}
/**
 * 
 * @export
 * @interface BookResponse
 */
export interface BookResponse {
    /**
     * 
     * @type {number}
     * @memberof BookResponse
     */
    'memberBookId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'bookImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface BookSearchResponse
 */
export interface BookSearchResponse {
    /**
     * 
     * @type {string}
     * @memberof BookSearchResponse
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookSearchResponse
     */
    'authors'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BookSearchResponse
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookSearchResponse
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface BookSearchResponses
 */
export interface BookSearchResponses {
    /**
     * 
     * @type {number}
     * @memberof BookSearchResponses
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookSearchResponses
     */
    'page'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BookSearchResponses
     */
    'isEnd'?: boolean;
    /**
     * 
     * @type {Array<BookSearchResponse>}
     * @memberof BookSearchResponses
     */
    'bookSearchResponses'?: Array<BookSearchResponse>;
}
/**
 * 
 * @export
 * @interface ChatRoomResponse
 */
export interface ChatRoomResponse {
    /**
     * 
     * @type {MemberResponse}
     * @memberof ChatRoomResponse
     */
    'otherMember'?: MemberResponse;
    /**
     * 
     * @type {PostCardResponse}
     * @memberof ChatRoomResponse
     */
    'postcard'?: PostCardResponse;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomResponse
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomResponse
     */
    'unreadCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomResponse
     */
    'lastChat'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomResponse
     */
    'lastChatTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomResponse
     */
    'isAlert'?: boolean;
}
/**
 * 
 * @export
 * @interface ContactInfoResponse
 */
export interface ContactInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof ContactInfoResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactInfoResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactInfoResponse
     */
    'memberAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactInfoResponse
     */
    'memberGender'?: ContactInfoResponseMemberGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactInfoResponse
     */
    'memberProfileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInfoResponse
     */
    'memberSchoolName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactInfoResponse
     */
    'bookImageUrls'?: Array<string>;
}

export const ContactInfoResponseMemberGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type ContactInfoResponseMemberGenderEnum = typeof ContactInfoResponseMemberGenderEnum[keyof typeof ContactInfoResponseMemberGenderEnum];

/**
 * 
 * @export
 * @interface EmailResponse
 */
export interface EmailResponse {
    /**
     * 
     * @type {string}
     * @memberof EmailResponse
     */
    'schoolEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponse
     */
    'emailVerifyStatus'?: string;
}
/**
 * 
 * @export
 * @interface GooglePaymentInAppPurchaseRequest
 */
export interface GooglePaymentInAppPurchaseRequest {
    /**
     * 
     * @type {string}
     * @memberof GooglePaymentInAppPurchaseRequest
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof GooglePaymentInAppPurchaseRequest
     */
    'purchaseToken': string;
}
/**
 * 
 * @export
 * @interface InvitationCodeEntryRequest
 */
export interface InvitationCodeEntryRequest {
    /**
     * 
     * @type {string}
     * @memberof InvitationCodeEntryRequest
     */
    'invitationCode': string;
}
/**
 * 
 * @export
 * @interface InvitationResponse
 */
export interface InvitationResponse {
    /**
     * 
     * @type {string}
     * @memberof InvitationResponse
     */
    'invitationType'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'authCode': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'memberStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     * 
     * @type {number}
     * @memberof LoginUser
     */
    'memberId'?: number;
}
/**
 * 
 * @export
 * @interface MemberAdmobRequest
 */
export interface MemberAdmobRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberAdmobRequest
     */
    'admobType': MemberAdmobRequestAdmobTypeEnum;
}

export const MemberAdmobRequestAdmobTypeEnum = {
    NewPerson: 'NEW_PERSON',
    FreeBookmark: 'FREE_BOOKMARK'
} as const;

export type MemberAdmobRequestAdmobTypeEnum = typeof MemberAdmobRequestAdmobTypeEnum[keyof typeof MemberAdmobRequestAdmobTypeEnum];

/**
 * 
 * @export
 * @interface MemberBlockCreateRequest
 */
export interface MemberBlockCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof MemberBlockCreateRequest
     */
    'blockedMemberId': number;
}
/**
 * 
 * @export
 * @interface MemberBlockCreateResponse
 */
export interface MemberBlockCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBlockCreateResponse
     */
    'memberBlockId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBlockCreateResponse
     */
    'blockerMemberId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBlockCreateResponse
     */
    'blockedMemberId'?: number;
}
/**
 * 
 * @export
 * @interface MemberBlockDeleteResponse
 */
export interface MemberBlockDeleteResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBlockDeleteResponse
     */
    'memberBlockId'?: number;
}
/**
 * 
 * @export
 * @interface MemberBlockDetail
 */
export interface MemberBlockDetail {
    /**
     * 
     * @type {number}
     * @memberof MemberBlockDetail
     */
    'memberBlockId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBlockDetail
     */
    'blockedMemberId'?: number;
}
/**
 * 
 * @export
 * @interface MemberBlockReadResponse
 */
export interface MemberBlockReadResponse {
    /**
     * 
     * @type {Array<MemberBlockDetail>}
     * @memberof MemberBlockReadResponse
     */
    'memberBlocks'?: Array<MemberBlockDetail>;
}
/**
 * 
 * @export
 * @interface MemberBookCreateRequest
 */
export interface MemberBookCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'title': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberBookCreateRequest
     */
    'authors': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'isbn': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'review': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'quiz': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'quizAnswer': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'firstWrongChoice': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookCreateRequest
     */
    'secondWrongChoice': string;
}
/**
 * 
 * @export
 * @interface MemberBookCreateResponse
 */
export interface MemberBookCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBookCreateResponse
     */
    'memberBookId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBookCreateResponse
     */
    'quizQuestionId'?: number;
}
/**
 * 
 * @export
 * @interface MemberBookProfileRequestDto
 */
export interface MemberBookProfileRequestDto {
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileRequestDto
     */
    'gender'?: MemberBookProfileRequestDtoGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileRequestDto
     */
    'smokeType'?: MemberBookProfileRequestDtoSmokeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileRequestDto
     */
    'mbti'?: MemberBookProfileRequestDtoMbtiEnum;
}

export const MemberBookProfileRequestDtoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberBookProfileRequestDtoGenderEnum = typeof MemberBookProfileRequestDtoGenderEnum[keyof typeof MemberBookProfileRequestDtoGenderEnum];
export const MemberBookProfileRequestDtoSmokeTypeEnum = {
    Smoke: 'SMOKE',
    NonSmoke: 'NON_SMOKE',
    Sometimes: 'SOMETIMES'
} as const;

export type MemberBookProfileRequestDtoSmokeTypeEnum = typeof MemberBookProfileRequestDtoSmokeTypeEnum[keyof typeof MemberBookProfileRequestDtoSmokeTypeEnum];
export const MemberBookProfileRequestDtoMbtiEnum = {
    Intp: 'INTP',
    Intj: 'INTJ',
    Infp: 'INFP',
    Infj: 'INFJ',
    Istp: 'ISTP',
    Istj: 'ISTJ',
    Isfp: 'ISFP',
    Isfj: 'ISFJ',
    Entp: 'ENTP',
    Entj: 'ENTJ',
    Enfp: 'ENFP',
    Enfj: 'ENFJ',
    Estp: 'ESTP',
    Estj: 'ESTJ',
    Esfp: 'ESFP',
    Esfj: 'ESFJ',
    Empty: 'EMPTY'
} as const;

export type MemberBookProfileRequestDtoMbtiEnum = typeof MemberBookProfileRequestDtoMbtiEnum[keyof typeof MemberBookProfileRequestDtoMbtiEnum];

/**
 * 
 * @export
 * @interface MemberBookProfileResponse
 */
export interface MemberBookProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBookProfileResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBookProfileResponse
     */
    'bookId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberBookProfileResponse
     */
    'memberAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileResponse
     */
    'memberGender'?: MemberBookProfileResponseMemberGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileResponse
     */
    'memberSchoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileResponse
     */
    'bookName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookProfileResponse
     */
    'bookImageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MemberBookProfileResponse
     */
    'bookIsRepresentative'?: boolean;
}

export const MemberBookProfileResponseMemberGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberBookProfileResponseMemberGenderEnum = typeof MemberBookProfileResponseMemberGenderEnum[keyof typeof MemberBookProfileResponseMemberGenderEnum];

/**
 * 
 * @export
 * @interface MemberBookQuizUpdateRequest
 */
export interface MemberBookQuizUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberBookQuizUpdateRequest
     */
    'quiz': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookQuizUpdateRequest
     */
    'quizAnswer': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookQuizUpdateRequest
     */
    'firstWrongChoice': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookQuizUpdateRequest
     */
    'secondWrongChoice': string;
}
/**
 * 
 * @export
 * @interface MemberBookReadResponse
 */
export interface MemberBookReadResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBookReadResponse
     */
    'memberBookId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberBookReadResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookReadResponse
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberBookReadResponse
     */
    'authors'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MemberBookReadResponses
 */
export interface MemberBookReadResponses {
    /**
     * 
     * @type {Array<MemberBookReadResponse>}
     * @memberof MemberBookReadResponses
     */
    'memberBookReadResponses'?: Array<MemberBookReadResponse>;
}
/**
 * 
 * @export
 * @interface MemberBookReviewUpdateRequest
 */
export interface MemberBookReviewUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberBookReviewUpdateRequest
     */
    'contents': string;
}
/**
 * 
 * @export
 * @interface MemberBookUpdateRequest
 */
export interface MemberBookUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberBookUpdateRequest
     */
    'contents': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookUpdateRequest
     */
    'quiz': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookUpdateRequest
     */
    'quizAnswer': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookUpdateRequest
     */
    'firstWrongChoice': string;
    /**
     * 
     * @type {string}
     * @memberof MemberBookUpdateRequest
     */
    'secondWrongChoice': string;
}
/**
 * 
 * @export
 * @interface MemberBookmarkAdmobResponse
 */
export interface MemberBookmarkAdmobResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberBookmarkAdmobResponse
     */
    'bookmarkCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBookmarkAdmobResponse
     */
    'freeBookmarkAdmobCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBookmarkAdmobResponse
     */
    'newPersonAdmobCount'?: number;
}
/**
 * 
 * @export
 * @interface MemberDeleteResponse
 */
export interface MemberDeleteResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberDeleteResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDeleteResponse
     */
    'memberStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDeleteResponse
     */
    'deleteAt'?: string;
}
/**
 * 
 * @export
 * @interface MemberEmailSendRequest
 */
export interface MemberEmailSendRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberEmailSendRequest
     */
    'schoolName': string;
    /**
     * 
     * @type {string}
     * @memberof MemberEmailSendRequest
     */
    'schoolEmail': string;
}
/**
 * 
 * @export
 * @interface MemberEmailVerifyRequest
 */
export interface MemberEmailVerifyRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberEmailVerifyRequest
     */
    'schoolName': string;
    /**
     * 
     * @type {string}
     * @memberof MemberEmailVerifyRequest
     */
    'schoolEmail': string;
    /**
     * 
     * @type {string}
     * @memberof MemberEmailVerifyRequest
     */
    'verifyCode': string;
}
/**
 * 
 * @export
 * @interface MemberInformationReadResponse
 */
export interface MemberInformationReadResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberInformationReadResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberInformationReadResponse
     */
    'mbti'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberInformationReadResponse
     */
    'smokeType'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberInformationReadResponse
     */
    'height'?: number;
}
/**
 * 
 * @export
 * @interface MemberInformationUpdateRequest
 */
export interface MemberInformationUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberInformationUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInformationUpdateRequest
     */
    'mbti': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInformationUpdateRequest
     */
    'smokeType': string;
    /**
     * 
     * @type {number}
     * @memberof MemberInformationUpdateRequest
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface MemberIntroResponse
 */
export interface MemberIntroResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberIntroResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'memberProfileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberIntroResponse
     */
    'memberAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'memberGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'memberSchoolName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberIntroResponse
     */
    'memberBookId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'bookCoverImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'bookTitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberIntroResponse
     */
    'bookAuthors'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberIntroResponse
     */
    'review'?: string;
}
/**
 * 
 * @export
 * @interface MemberInvitationResponse
 */
export interface MemberInvitationResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberInvitationResponse
     */
    'invitationCode'?: string;
}
/**
 * 
 * @export
 * @interface MemberInvitationRewardResponse
 */
export interface MemberInvitationRewardResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MemberInvitationRewardResponse
     */
    'invitingRewardStatus'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberInvitationRewardResponse
     */
    'invitedRewardStatus'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MemberInvitationRewardResponse
     */
    'invitedMembersGender'?: string;
}
/**
 * 
 * @export
 * @interface MemberNameVerifyRequest
 */
export interface MemberNameVerifyRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberNameVerifyRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MemberNameVerifyResponse
 */
export interface MemberNameVerifyResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MemberNameVerifyResponse
     */
    'verified'?: boolean;
}
/**
 * 
 * @export
 * @interface MemberOnboardingStatusRequest
 */
export interface MemberOnboardingStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberOnboardingStatusRequest
     */
    'onboarding': MemberOnboardingStatusRequestOnboardingEnum;
}

export const MemberOnboardingStatusRequestOnboardingEnum = {
    Home: 'HOME',
    Library: 'LIBRARY',
    Invalid: 'INVALID'
} as const;

export type MemberOnboardingStatusRequestOnboardingEnum = typeof MemberOnboardingStatusRequestOnboardingEnum[keyof typeof MemberOnboardingStatusRequestOnboardingEnum];

/**
 * 
 * @export
 * @interface MemberOnboardingStatusResponse
 */
export interface MemberOnboardingStatusResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MemberOnboardingStatusResponse
     */
    'homeOnboardingStatus'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberOnboardingStatusResponse
     */
    'libraryOnboardingStatus'?: boolean;
}
/**
 * 
 * @export
 * @interface MemberPolicyCreateRequest
 */
export interface MemberPolicyCreateRequest {
    /**
     * 
     * @type {AgreedStatuses}
     * @memberof MemberPolicyCreateRequest
     */
    'agreedStatuses': AgreedStatuses;
}
/**
 * 
 * @export
 * @interface MemberPolicyResponse
 */
export interface MemberPolicyResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberPolicyResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {AgreedStatuses}
     * @memberof MemberPolicyResponse
     */
    'agreedStatuses'?: AgreedStatuses;
}
/**
 * 
 * @export
 * @interface MemberPolicyUpdateRequest
 */
export interface MemberPolicyUpdateRequest {
    /**
     * 
     * @type {AgreedStatuses}
     * @memberof MemberPolicyUpdateRequest
     */
    'agreedStatuses': AgreedStatuses;
}
/**
 * 
 * @export
 * @interface MemberPostcardFromResponse
 */
export interface MemberPostcardFromResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardFromResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardFromResponse
     */
    'memberAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'memberGender'?: MemberPostcardFromResponseMemberGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'memberSchoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'memberProfileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'memberOpenKakaoRoomUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'representativeBookTitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberPostcardFromResponse
     */
    'representativeBookAuthor'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberPostcardFromResponse
     */
    'bookImageUrls'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardFromResponse
     */
    'postcardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardFromResponse
     */
    'postcardStatus'?: MemberPostcardFromResponsePostcardStatusEnum;
}

export const MemberPostcardFromResponseMemberGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberPostcardFromResponseMemberGenderEnum = typeof MemberPostcardFromResponseMemberGenderEnum[keyof typeof MemberPostcardFromResponseMemberGenderEnum];
export const MemberPostcardFromResponsePostcardStatusEnum = {
    Pending: 'PENDING',
    Read: 'READ',
    Accept: 'ACCEPT',
    Refused: 'REFUSED',
    AllWrong: 'ALL_WRONG'
} as const;

export type MemberPostcardFromResponsePostcardStatusEnum = typeof MemberPostcardFromResponsePostcardStatusEnum[keyof typeof MemberPostcardFromResponsePostcardStatusEnum];

/**
 * 
 * @export
 * @interface MemberPostcardToResponse
 */
export interface MemberPostcardToResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardToResponse
     */
    'postcardId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardToResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'memberProfileImageUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberPostcardToResponse
     */
    'memberAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'memberGender'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'drinkType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'smokeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'contactType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'dateStyleType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'dateCostType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'mbti'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'justFriendType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'heightType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'memberSchoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'receivedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'postcardStatus'?: MemberPostcardToResponsePostcardStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberPostcardToResponse
     */
    'postcardImageUrl'?: string;
}

export const MemberPostcardToResponsePostcardStatusEnum = {
    Pending: 'PENDING',
    Read: 'READ',
    Accept: 'ACCEPT',
    Refused: 'REFUSED',
    AllWrong: 'ALL_WRONG'
} as const;

export type MemberPostcardToResponsePostcardStatusEnum = typeof MemberPostcardToResponsePostcardStatusEnum[keyof typeof MemberPostcardToResponsePostcardStatusEnum];

/**
 * 
 * @export
 * @interface MemberProfileCreateRequest
 */
export interface MemberProfileCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberProfileCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileCreateRequest
     */
    'birthDate': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileCreateRequest
     */
    'gender': MemberProfileCreateRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileCreateRequest
     */
    'schoolName': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileCreateRequest
     */
    'schoolEmail': string;
}

export const MemberProfileCreateRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberProfileCreateRequestGenderEnum = typeof MemberProfileCreateRequestGenderEnum[keyof typeof MemberProfileCreateRequestGenderEnum];

/**
 * 
 * @export
 * @interface MemberProfileImageTypeUpdateRequest
 */
export interface MemberProfileImageTypeUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof MemberProfileImageTypeUpdateRequest
     */
    'profileImageTypeId': number;
}
/**
 * 
 * @export
 * @interface MemberProfileResponse
 */
export interface MemberProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberProfileResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileResponse
     */
    'schoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileResponse
     */
    'schoolEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileResponse
     */
    'gender'?: string;
}
/**
 * 
 * @export
 * @interface MemberProfileStatusResponse
 */
export interface MemberProfileStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberProfileStatusResponse
     */
    'studentIdImageStatus'?: string;
}
/**
 * 
 * @export
 * @interface MemberProfileStudentIdImageUrlUpdateRequest
 */
export interface MemberProfileStudentIdImageUrlUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberProfileStudentIdImageUrlUpdateRequest
     */
    'studentIdImageUrl': string;
}
/**
 * 
 * @export
 * @interface MemberProfileStudentIdReadResponse
 */
export interface MemberProfileStudentIdReadResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberProfileStudentIdReadResponse
     */
    'studentIdImageStatus'?: string;
}
/**
 * 
 * @export
 * @interface MemberProfileUpdateRequest
 */
export interface MemberProfileUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberProfileUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileUpdateRequest
     */
    'birthDate': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileUpdateRequest
     */
    'gender': MemberProfileUpdateRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileUpdateRequest
     */
    'schoolName': string;
    /**
     * 
     * @type {string}
     * @memberof MemberProfileUpdateRequest
     */
    'schoolEmail': string;
}

export const MemberProfileUpdateRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberProfileUpdateRequestGenderEnum = typeof MemberProfileUpdateRequestGenderEnum[keyof typeof MemberProfileUpdateRequestGenderEnum];

/**
 * 
 * @export
 * @interface MemberPushAlarmReadResponse
 */
export interface MemberPushAlarmReadResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberPushAlarmReadResponse
     */
    'memberPushAlarmId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberPushAlarmReadResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPushAlarmReadResponse
     */
    'body'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberPushAlarmReadResponse
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface MemberPushAlarmReadResponses
 */
export interface MemberPushAlarmReadResponses {
    /**
     * 
     * @type {number}
     * @memberof MemberPushAlarmReadResponses
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<MemberPushAlarmReadResponse>}
     * @memberof MemberPushAlarmReadResponses
     */
    'data'?: Array<MemberPushAlarmReadResponse>;
}
/**
 * 
 * @export
 * @interface MemberReportCreateRequest
 */
export interface MemberReportCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof MemberReportCreateRequest
     */
    'reportedMemberId': number;
    /**
     * 
     * @type {ReportStatuses}
     * @memberof MemberReportCreateRequest
     */
    'reportStatuses': ReportStatuses;
    /**
     * 
     * @type {string}
     * @memberof MemberReportCreateRequest
     */
    'reportContents'?: string;
}
/**
 * 
 * @export
 * @interface MemberReportCreateResponse
 */
export interface MemberReportCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberReportCreateResponse
     */
    'memberReportId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberReportCreateResponse
     */
    'reporterMemberId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberReportCreateResponse
     */
    'reportedMemberId'?: number;
    /**
     * 
     * @type {ReportStatuses}
     * @memberof MemberReportCreateResponse
     */
    'reportStatuses'?: ReportStatuses;
    /**
     * 
     * @type {string}
     * @memberof MemberReportCreateResponse
     */
    'reportContents'?: string;
}
/**
 * 
 * @export
 * @interface MemberReportDeleteResponse
 */
export interface MemberReportDeleteResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberReportDeleteResponse
     */
    'memberReportId'?: number;
}
/**
 * 
 * @export
 * @interface MemberReportDetail
 */
export interface MemberReportDetail {
    /**
     * 
     * @type {number}
     * @memberof MemberReportDetail
     */
    'memberReportId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberReportDetail
     */
    'reportedMemberId'?: number;
    /**
     * 
     * @type {ReportStatuses}
     * @memberof MemberReportDetail
     */
    'reportStatuses'?: ReportStatuses;
    /**
     * 
     * @type {string}
     * @memberof MemberReportDetail
     */
    'reportContents'?: string;
}
/**
 * 
 * @export
 * @interface MemberReportReadResponse
 */
export interface MemberReportReadResponse {
    /**
     * 
     * @type {Array<MemberReportDetail>}
     * @memberof MemberReportReadResponse
     */
    'memberReports'?: Array<MemberReportDetail>;
}
/**
 * 
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'oauthEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'memberType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'memberStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'memberGender'?: string;
}
/**
 * 
 * @export
 * @interface MemberStatusResponse
 */
export interface MemberStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'memberStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'schoolStatus'?: string;
}
/**
 * 
 * @export
 * @interface MemberStatusUpdateRequest
 */
export interface MemberStatusUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberStatusUpdateRequest
     */
    'memberStatus': MemberStatusUpdateRequestMemberStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberStatusUpdateRequest
     */
    'reason'?: string;
}

export const MemberStatusUpdateRequestMemberStatusEnum = {
    Profile: 'PROFILE',
    Style: 'STYLE',
    Book: 'BOOK',
    Approval: 'APPROVAL',
    Rejected: 'REJECTED',
    Completed: 'COMPLETED',
    Deleted: 'DELETED',
    Blocked: 'BLOCKED',
    MatchingDisabled: 'MATCHING_DISABLED',
    Reported: 'REPORTED'
} as const;

export type MemberStatusUpdateRequestMemberStatusEnum = typeof MemberStatusUpdateRequestMemberStatusEnum[keyof typeof MemberStatusUpdateRequestMemberStatusEnum];

/**
 * 
 * @export
 * @interface MemberStyleCreateRequest
 */
export interface MemberStyleCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberStyleCreateRequest
     */
    'mbti': string;
    /**
     * 
     * @type {string}
     * @memberof MemberStyleCreateRequest
     */
    'smokeType': string;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleCreateRequest
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleCreateRequest
     */
    'profileImageTypeId': number;
}
/**
 * 
 * @export
 * @interface MemberStyleResponse
 */
export interface MemberStyleResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberStyleResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberStyleResponse
     */
    'smokeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberStyleResponse
     */
    'mbti'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleResponse
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleResponse
     */
    'profileImageTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberStyleResponse
     */
    'profileImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface MemberStyleUpdateRequest
 */
export interface MemberStyleUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberStyleUpdateRequest
     */
    'mbti': MemberStyleUpdateRequestMbtiEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberStyleUpdateRequest
     */
    'smokeType': MemberStyleUpdateRequestSmokeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleUpdateRequest
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberStyleUpdateRequest
     */
    'profileImageTypeId': number;
}

export const MemberStyleUpdateRequestMbtiEnum = {
    Intp: 'INTP',
    Intj: 'INTJ',
    Infp: 'INFP',
    Infj: 'INFJ',
    Istp: 'ISTP',
    Istj: 'ISTJ',
    Isfp: 'ISFP',
    Isfj: 'ISFJ',
    Entp: 'ENTP',
    Entj: 'ENTJ',
    Enfp: 'ENFP',
    Enfj: 'ENFJ',
    Estp: 'ESTP',
    Estj: 'ESTJ',
    Esfp: 'ESFP',
    Esfj: 'ESFJ',
    Empty: 'EMPTY'
} as const;

export type MemberStyleUpdateRequestMbtiEnum = typeof MemberStyleUpdateRequestMbtiEnum[keyof typeof MemberStyleUpdateRequestMbtiEnum];
export const MemberStyleUpdateRequestSmokeTypeEnum = {
    Smoke: 'SMOKE',
    NonSmoke: 'NON_SMOKE',
    Sometimes: 'SOMETIMES'
} as const;

export type MemberStyleUpdateRequestSmokeTypeEnum = typeof MemberStyleUpdateRequestSmokeTypeEnum[keyof typeof MemberStyleUpdateRequestSmokeTypeEnum];

/**
 * 
 * @export
 * @interface MemberTokenCreateRequest
 */
export interface MemberTokenCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MemberTokenCreateRequest
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface MemberTokenCreateResponse
 */
export interface MemberTokenCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberTokenCreateResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberTokenCreateResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface MyLibraryReadResponse
 */
export interface MyLibraryReadResponse {
    /**
     * 
     * @type {number}
     * @memberof MyLibraryReadResponse
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MyLibraryReadResponse
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'profileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'mbti'?: string;
    /**
     * 
     * @type {string}
     * @memberof MyLibraryReadResponse
     */
    'smokeType'?: string;
    /**
     * 
     * @type {number}
     * @memberof MyLibraryReadResponse
     */
    'height'?: number;
    /**
     * 
     * @type {Array<BookResponse>}
     * @memberof MyLibraryReadResponse
     */
    'bookResponses'?: Array<BookResponse>;
}
/**
 * 
 * @export
 * @interface NotificationResponse
 */
export interface NotificationResponse {
    /**
     * 
     * @type {string}
     * @memberof NotificationResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationResponse
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderBookmarkForGoogleRequest
 */
export interface OrderBookmarkForGoogleRequest {
    /**
     * 
     * @type {LoginUser}
     * @memberof OrderBookmarkForGoogleRequest
     */
    'loginUser'?: LoginUser;
    /**
     * 
     * @type {GooglePaymentInAppPurchaseRequest}
     * @memberof OrderBookmarkForGoogleRequest
     */
    'request'?: GooglePaymentInAppPurchaseRequest;
}
/**
 * 
 * @export
 * @interface OtherLibraryReadResponse
 */
export interface OtherLibraryReadResponse {
    /**
     * 
     * @type {MyLibraryReadResponse}
     * @memberof OtherLibraryReadResponse
     */
    'baseResponse'?: MyLibraryReadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof OtherLibraryReadResponse
     */
    'matched'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMemberBookProfileResponse
 */
export interface PageMemberBookProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof PageMemberBookProfileResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMemberBookProfileResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageMemberBookProfileResponse
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMemberBookProfileResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMemberBookProfileResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMemberBookProfileResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<MemberBookProfileResponse>}
     * @memberof PageMemberBookProfileResponse
     */
    'content'?: Array<MemberBookProfileResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageMemberBookProfileResponse
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMemberBookProfileResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMemberBookProfileResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMemberBookProfileResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface PaymentPurchaseResponse
 */
export interface PaymentPurchaseResponse {
    /**
     * 
     * @type {number}
     * @memberof PaymentPurchaseResponse
     */
    'bookmarks'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPurchaseResponse
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface PostCardResponse
 */
export interface PostCardResponse {
    /**
     * 
     * @type {number}
     * @memberof PostCardResponse
     */
    'postcardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostCardResponse
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCardResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCardResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCardResponse
     */
    'status'?: PostCardResponseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PostCardResponse
     */
    'senderId'?: number;
}

export const PostCardResponseStatusEnum = {
    Pending: 'PENDING',
    Read: 'READ',
    Accept: 'ACCEPT',
    Refused: 'REFUSED',
    AllWrong: 'ALL_WRONG'
} as const;

export type PostCardResponseStatusEnum = typeof PostCardResponseStatusEnum[keyof typeof PostCardResponseStatusEnum];

/**
 * 
 * @export
 * @interface PostcardSendValidateResponse
 */
export interface PostcardSendValidateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof PostcardSendValidateResponse
     */
    'isRefused'?: boolean;
}
/**
 * 
 * @export
 * @interface PostcardSendValidationRequest
 */
export interface PostcardSendValidationRequest {
    /**
     * 
     * @type {number}
     * @memberof PostcardSendValidationRequest
     */
    'targetMemberId'?: number;
}
/**
 * 
 * @export
 * @interface PostcardStatusResponse
 */
export interface PostcardStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof PostcardStatusResponse
     */
    'postcardStatus'?: PostcardStatusResponsePostcardStatusEnum;
}

export const PostcardStatusResponsePostcardStatusEnum = {
    Pending: 'PENDING',
    Read: 'READ',
    Accept: 'ACCEPT',
    Refused: 'REFUSED',
    AllWrong: 'ALL_WRONG'
} as const;

export type PostcardStatusResponsePostcardStatusEnum = typeof PostcardStatusResponsePostcardStatusEnum[keyof typeof PostcardStatusResponsePostcardStatusEnum];

/**
 * 
 * @export
 * @interface PostcardStatusUpdateRequest
 */
export interface PostcardStatusUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof PostcardStatusUpdateRequest
     */
    'postcardId': number;
    /**
     * 
     * @type {string}
     * @memberof PostcardStatusUpdateRequest
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface PostcardTypeDto
 */
export interface PostcardTypeDto {
    /**
     * 
     * @type {number}
     * @memberof PostcardTypeDto
     */
    'postcardTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostcardTypeDto
     */
    'postcardTypeName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostcardTypeDto
     */
    'postcardTypePrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostcardTypeDto
     */
    'postcardImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface PostcardTypeResponse
 */
export interface PostcardTypeResponse {
    /**
     * 
     * @type {Array<PostcardTypeDto>}
     * @memberof PostcardTypeResponse
     */
    'postcardTypeList'?: Array<PostcardTypeDto>;
}
/**
 * 
 * @export
 * @interface ProfileImageResponse
 */
export interface ProfileImageResponse {
    /**
     * 
     * @type {number}
     * @memberof ProfileImageResponse
     */
    'profileImageTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileImageResponse
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileImageResponse
     */
    'profileImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface ProfileImageTypeReadResponse
 */
export interface ProfileImageTypeReadResponse {
    /**
     * 
     * @type {Array<ProfileImageResponse>}
     * @memberof ProfileImageTypeReadResponse
     */
    'profileImageResponseTypes'?: Array<ProfileImageResponse>;
}
/**
 * 
 * @export
 * @interface PushAlarmSettingCreateRequest
 */
export interface PushAlarmSettingCreateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PushAlarmSettingCreateRequest
     */
    'pushAlarmEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface PushAlarmSettingResponse
 */
export interface PushAlarmSettingResponse {
    /**
     * 
     * @type {boolean}
     * @memberof PushAlarmSettingResponse
     */
    'pushAlarmEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface QuizQuestionReadResponse
 */
export interface QuizQuestionReadResponse {
    /**
     * 
     * @type {number}
     * @memberof QuizQuestionReadResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionReadResponse
     */
    'quiz'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionReadResponse
     */
    'firstChoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionReadResponse
     */
    'secondChoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionReadResponse
     */
    'thirdChoice'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionReadResponse
     */
    'review'?: string;
}
/**
 * 
 * @export
 * @interface QuizQuestionVerifyRequest
 */
export interface QuizQuestionVerifyRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizQuestionVerifyRequest
     */
    'quizMakerId': number;
    /**
     * 
     * @type {number}
     * @memberof QuizQuestionVerifyRequest
     */
    'quizId': number;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionVerifyRequest
     */
    'quizAnswer': string;
}
/**
 * 
 * @export
 * @interface QuizQuestionVerifyResponse
 */
export interface QuizQuestionVerifyResponse {
    /**
     * 
     * @type {boolean}
     * @memberof QuizQuestionVerifyResponse
     */
    'isCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface RefreshMemberRequest
 */
export interface RefreshMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof RefreshMemberRequest
     */
    'refreshMemberId': number;
    /**
     * 
     * @type {number}
     * @memberof RefreshMemberRequest
     */
    'refreshMemberBookId': number;
}
/**
 * 
 * @export
 * @interface RejectMemberRequest
 */
export interface RejectMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof RejectMemberRequest
     */
    'rejectedMemberId': number;
}
/**
 * 
 * @export
 * @interface ReportStatuses
 */
export interface ReportStatuses {
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isNicknameReported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isBookQuizReported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isReviewReported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isConversationReported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isProposalReported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportStatuses
     */
    'isOtherReported'?: boolean;
}
/**
 * 
 * @export
 * @interface S3PresignedUrlResponse
 */
export interface S3PresignedUrlResponse {
    /**
     * 
     * @type {string}
     * @memberof S3PresignedUrlResponse
     */
    'presignedUrl'?: string;
}
/**
 * 
 * @export
 * @interface SchoolDetail
 */
export interface SchoolDetail {
    /**
     * 
     * @type {number}
     * @memberof SchoolDetail
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchoolDetail
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolDetail
     */
    'emailDomain'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolDetail
     */
    'schoolStatus'?: string;
}
/**
 * 
 * @export
 * @interface SchoolInvitationResponse
 */
export interface SchoolInvitationResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolInvitationResponse
     */
    'schoolStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolInvitationResponse
     */
    'schoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolInvitationResponse
     */
    'invitationCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchoolInvitationResponse
     */
    'currentMemberCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchoolInvitationResponse
     */
    'goalMemberCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchoolInvitationResponse
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface SchoolReadResponse
 */
export interface SchoolReadResponse {
    /**
     * 
     * @type {Array<SchoolDetail>}
     * @memberof SchoolReadResponse
     */
    'schools'?: Array<SchoolDetail>;
}
/**
 * 
 * @export
 * @interface SendPostcardRequest
 */
export interface SendPostcardRequest {
    /**
     * 
     * @type {number}
     * @memberof SendPostcardRequest
     */
    'postcardTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof SendPostcardRequest
     */
    'receiveMemberId': number;
    /**
     * 
     * @type {string}
     * @memberof SendPostcardRequest
     */
    'memberReply': string;
}
/**
 * 
 * @export
 * @interface SendPostcardResponse
 */
export interface SendPostcardResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SendPostcardResponse
     */
    'isSendSuccess'?: boolean;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}
/**
 * 
 * @export
 * @interface TestSignUpRequest
 */
export interface TestSignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof TestSignUpRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface TestSignUpResponse
 */
export interface TestSignUpResponse {
    /**
     * 
     * @type {string}
     * @memberof TestSignUpResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof TestSignUpResponse
     */
    'memberId'?: number;
}
/**
 * 
 * @export
 * @interface VersionCreateRequest
 */
export interface VersionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof VersionCreateRequest
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface VersionCreateResponse
 */
export interface VersionCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof VersionCreateResponse
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface VersionReadResponse
 */
export interface VersionReadResponse {
    /**
     * 
     * @type {string}
     * @memberof VersionReadResponse
     */
    'version'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 회원 도서 등록
         * @param {MemberBookCreateRequest} memberBookCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberBook: async (memberBookCreateRequest: MemberBookCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookCreateRequest' is not null or undefined
            assertParamExists('addMemberBook', 'memberBookCreateRequest', memberBookCreateRequest)
            const localVarPath = `/member-books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberBookCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 스타일 생성
         * @param {MemberStyleCreateRequest} memberStyleCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberStyle: async (memberStyleCreateRequest: MemberStyleCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberStyleCreateRequest' is not null or undefined
            assertParamExists('createMemberStyle', 'memberStyleCreateRequest', memberStyleCreateRequest)
            const localVarPath = `/members/styles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberStyleCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 독서 퀴즈 조회 API
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuizQuestion: async (memberBookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('createQuizQuestion', 'memberBookId', memberBookId)
            const localVarPath = `/quizzes/{memberBookId}`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 도서 삭제
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberBook: async (memberBookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('deleteMemberBook', 'memberBookId', memberBookId)
            const localVarPath = `/member-books/{memberBookId}`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상대방으로부터 받은 초대코드를 입력합니다
         * @param {InvitationCodeEntryRequest} invitationCodeEntryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryInvitationCode: async (invitationCodeEntryRequest: InvitationCodeEntryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationCodeEntryRequest' is not null or undefined
            assertParamExists('entryInvitationCode', 'invitationCodeEntryRequest', invitationCodeEntryRequest)
            const localVarPath = `/invitation-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invitationCodeEntryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 프로필의 상태 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberStatuses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/member/profile/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매칭 회원 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members-match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 관리자 로그인을 합니다.
         * @summary 관리자 로그인
         * @param {AdminLoginRequest} adminLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login1: async (adminLoginRequest: AdminLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminLoginRequest' is not null or undefined
            assertParamExists('login1', 'adminLoginRequest', adminLoginRequest)
            const localVarPath = `/admin/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 관리자 로그아웃을 합니다.
         * @summary 관리자 로그아웃
         * @param {AdminLogoutRequest} adminLogoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (adminLogoutRequest: AdminLogoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminLogoutRequest' is not null or undefined
            assertParamExists('logout', 'adminLogoutRequest', adminLogoutRequest)
            const localVarPath = `/admin/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminLogoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인앱결제 API입니다
         * @param {ApplePaymentInAppPurchaseRequest} applePaymentInAppPurchaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookmarkForApple: async (applePaymentInAppPurchaseRequest: ApplePaymentInAppPurchaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applePaymentInAppPurchaseRequest' is not null or undefined
            assertParamExists('orderBookmarkForApple', 'applePaymentInAppPurchaseRequest', applePaymentInAppPurchaseRequest)
            const localVarPath = `/payments/in-app/apple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applePaymentInAppPurchaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderBookmarkForGoogleRequest} orderBookmarkForGoogleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookmarkForGoogle: async (orderBookmarkForGoogleRequest: OrderBookmarkForGoogleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderBookmarkForGoogleRequest' is not null or undefined
            assertParamExists('orderBookmarkForGoogle', 'orderBookmarkForGoogleRequest', orderBookmarkForGoogleRequest)
            const localVarPath = `/payments/in-app/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderBookmarkForGoogleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 탈퇴 회원 목록 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeletedMembers: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('readDeletedMembers', 'pageable', pageable)
            const localVarPath = `/admin/members/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원이 가진 초대코드를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readInvitationCode: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invitation-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 도서 상세 조회
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBook: async (memberBookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('readMemberBook', 'memberBookId', memberBookId)
            const localVarPath = `/member-books/{memberBookId}`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원의 모든 도서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBooks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 서재 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfile1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/library`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 상대 서재 조회
         * @param {number} targetMemberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileByTarget: async (targetMemberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetMemberId' is not null or undefined
            assertParamExists('readMemberProfileByTarget', 'targetMemberId', targetMemberId)
            const localVarPath = `/library/target/{targetMemberId}`
                .replace(`{${"targetMemberId"}}`, encodeURIComponent(String(targetMemberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자와 같은 성별의 기본 프로필 설정 값들을 읽어들입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileGenderTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/me/profile-image-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 스타일 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStyle: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/styles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 전체 조회
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMembers: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('readMembers', 'pageable', pageable)
            const localVarPath = `/admin/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모든 학교 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSchool: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 학교의 가입 회원 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSchoolInformation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schools/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 학생증 승인 대기 회원 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentIdPendingMembers: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('readStudentIdPendingMembers', 'pageable', pageable)
            const localVarPath = `/admin/members/pending/student-id/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매칭 회원 새로고침
         * @param {RefreshMemberRequest} refreshMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshMemberMatching: async (refreshMemberRequest: RefreshMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshMemberRequest' is not null or undefined
            assertParamExists('refreshMemberMatching', 'refreshMemberRequest', refreshMemberRequest)
            const localVarPath = `/members-match/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매칭 회원 거절
         * @param {RejectMemberRequest} rejectMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectMemberMatching: async (rejectMemberRequest: RejectMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rejectMemberRequest' is not null or undefined
            assertParamExists('rejectMemberMatching', 'rejectMemberRequest', rejectMemberRequest)
            const localVarPath = `/members-match/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rejectMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 작가 혹은 도서를 검색합니다
         * @param {string} text 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBooks: async (text: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('searchBooks', 'text', text)
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API(deprecated)
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAlarms: async (adminNotificationRequest: AdminNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminNotificationRequest' is not null or undefined
            assertParamExists('sendAlarms', 'adminNotificationRequest', adminNotificationRequest)
            const localVarPath = `/admin/alarm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개인 푸시 알림 전송 API
         * @param {AdminMemberNotificationRequest} adminMemberNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification: async (adminMemberNotificationRequest: AdminMemberNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminMemberNotificationRequest' is not null or undefined
            assertParamExists('sendNotification', 'adminMemberNotificationRequest', adminMemberNotificationRequest)
            const localVarPath = `/admin/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminMemberNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotifications: async (adminNotificationRequest: AdminNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminNotificationRequest' is not null or undefined
            assertParamExists('sendNotifications', 'adminNotificationRequest', adminNotificationRequest)
            const localVarPath = `/admin/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 테스트 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSignUpAdmin: async (testSignUpRequest: TestSignUpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testSignUpRequest' is not null or undefined
            assertParamExists('testSignUpAdmin', 'testSignUpRequest', testSignUpRequest)
            const localVarPath = `/tests/sign-up/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testSignUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSignUpKakao: async (testSignUpRequest: TestSignUpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testSignUpRequest' is not null or undefined
            assertParamExists('testSignUpKakao', 'testSignUpRequest', testSignUpRequest)
            const localVarPath = `/tests/sign-up/kakao`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testSignUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 도서 모든 내용(퀴즈 및 답변, 감상문) 수정
         * @param {number} memberBookId 
         * @param {MemberBookUpdateRequest} memberBookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberBook: async (memberBookId: number, memberBookUpdateRequest: MemberBookUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('updateMemberBook', 'memberBookId', memberBookId)
            // verify required parameter 'memberBookUpdateRequest' is not null or undefined
            assertParamExists('updateMemberBook', 'memberBookUpdateRequest', memberBookUpdateRequest)
            const localVarPath = `/member-books/{memberBookId}`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberBookUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 스타일 수정
         * @param {MemberStyleUpdateRequest} memberStyleUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStyle: async (memberStyleUpdateRequest: MemberStyleUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberStyleUpdateRequest' is not null or undefined
            assertParamExists('updateMemberStyle', 'memberStyleUpdateRequest', memberStyleUpdateRequest)
            const localVarPath = `/members/styles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberStyleUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 스타일 내 기본 프로필 사진 수정
         * @param {MemberProfileImageTypeUpdateRequest} memberProfileImageTypeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStyleProfileImageType: async (memberProfileImageTypeUpdateRequest: MemberProfileImageTypeUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberProfileImageTypeUpdateRequest' is not null or undefined
            assertParamExists('updateMemberStyleProfileImageType', 'memberProfileImageTypeUpdateRequest', memberProfileImageTypeUpdateRequest)
            const localVarPath = `/members/styles/profile-image-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberProfileImageTypeUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 도서의 퀴즈 및 답변 수정
         * @param {number} memberBookId 
         * @param {MemberBookQuizUpdateRequest} memberBookQuizUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuiz: async (memberBookId: number, memberBookQuizUpdateRequest: MemberBookQuizUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('updateQuiz', 'memberBookId', memberBookId)
            // verify required parameter 'memberBookQuizUpdateRequest' is not null or undefined
            assertParamExists('updateQuiz', 'memberBookQuizUpdateRequest', memberBookQuizUpdateRequest)
            const localVarPath = `/member-books/{memberBookId}/quiz`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberBookQuizUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 도서의 감상문 수정
         * @param {number} memberBookId 
         * @param {MemberBookReviewUpdateRequest} memberBookReviewUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: async (memberBookId: number, memberBookReviewUpdateRequest: MemberBookReviewUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookId' is not null or undefined
            assertParamExists('updateReview', 'memberBookId', memberBookId)
            // verify required parameter 'memberBookReviewUpdateRequest' is not null or undefined
            assertParamExists('updateReview', 'memberBookReviewUpdateRequest', memberBookReviewUpdateRequest)
            const localVarPath = `/member-books/{memberBookId}/review`
                .replace(`{${"memberBookId"}}`, encodeURIComponent(String(memberBookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberBookReviewUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 학생증 이미지 상태 변경 API
         * @param {number} memberVerifyId 
         * @param {AdminMemberProfileStudentIdStatusUpdateRequest} adminMemberProfileStudentIdStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentIdPendingMemberStatus: async (memberVerifyId: number, adminMemberProfileStudentIdStatusUpdateRequest: AdminMemberProfileStudentIdStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberVerifyId' is not null or undefined
            assertParamExists('updateStudentIdPendingMemberStatus', 'memberVerifyId', memberVerifyId)
            // verify required parameter 'adminMemberProfileStudentIdStatusUpdateRequest' is not null or undefined
            assertParamExists('updateStudentIdPendingMemberStatus', 'adminMemberProfileStudentIdStatusUpdateRequest', adminMemberProfileStudentIdStatusUpdateRequest)
            const localVarPath = `/admin/member-verifies/{memberVerifyId}/pending/student-id/image`
                .replace(`{${"memberVerifyId"}}`, encodeURIComponent(String(memberVerifyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminMemberProfileStudentIdStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 독서 퀴즈 검증 API
         * @param {QuizQuestionVerifyRequest} quizQuestionVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyQuizQuestion: async (quizQuestionVerifyRequest: QuizQuestionVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizQuestionVerifyRequest' is not null or undefined
            assertParamExists('verifyQuizQuestion', 'quizQuestionVerifyRequest', quizQuestionVerifyRequest)
            const localVarPath = `/quizzes/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizQuestionVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 회원 도서 등록
         * @param {MemberBookCreateRequest} memberBookCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberBook(memberBookCreateRequest: MemberBookCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBookCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberBook(memberBookCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addMemberBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 스타일 생성
         * @param {MemberStyleCreateRequest} memberStyleCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemberStyle(memberStyleCreateRequest: MemberStyleCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberStyleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemberStyle(memberStyleCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMemberStyle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 독서 퀴즈 조회 API
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuizQuestion(memberBookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizQuestionReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuizQuestion(memberBookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createQuizQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 도서 삭제
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberBook(memberBookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberBook(memberBookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMemberBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상대방으로부터 받은 초대코드를 입력합니다
         * @param {InvitationCodeEntryRequest} invitationCodeEntryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryInvitationCode(invitationCodeEntryRequest: InvitationCodeEntryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryInvitationCode(invitationCodeEntryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.entryInvitationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 프로필의 상태 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberStatuses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminMemberProfileStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberStatuses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMemberStatuses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 매칭 회원 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberIntroResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRecommendation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 관리자 로그인을 합니다.
         * @summary 관리자 로그인
         * @param {AdminLoginRequest} adminLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login1(adminLoginRequest: AdminLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login1(adminLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 관리자 로그아웃을 합니다.
         * @summary 관리자 로그아웃
         * @param {AdminLogoutRequest} adminLogoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(adminLogoutRequest: AdminLogoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(adminLogoutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 인앱결제 API입니다
         * @param {ApplePaymentInAppPurchaseRequest} applePaymentInAppPurchaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderBookmarkForApple(applePaymentInAppPurchaseRequest: ApplePaymentInAppPurchaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderBookmarkForApple(applePaymentInAppPurchaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.orderBookmarkForApple']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OrderBookmarkForGoogleRequest} orderBookmarkForGoogleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderBookmarkForGoogle(orderBookmarkForGoogleRequest: OrderBookmarkForGoogleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderBookmarkForGoogle(orderBookmarkForGoogleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.orderBookmarkForGoogle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 탈퇴 회원 목록 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDeletedMembers(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminMemberReadResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDeletedMembers(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readDeletedMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원이 가진 초대코드를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readInvitationCode(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInvitationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readInvitationCode(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readInvitationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 도서 상세 조회
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberBook(memberBookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBookReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberBook(memberBookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원의 모든 도서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberBooks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBookReadResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberBooks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내 서재 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberProfile1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyLibraryReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberProfile1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberProfile1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 상대 서재 조회
         * @param {number} targetMemberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberProfileByTarget(targetMemberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherLibraryReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberProfileByTarget(targetMemberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberProfileByTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 사용자와 같은 성별의 기본 프로필 설정 값들을 읽어들입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberProfileGenderTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileImageTypeReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberProfileGenderTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberProfileGenderTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 스타일 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberStyle(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberStyleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberStyle(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMemberStyle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 전체 조회
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMembers(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminMemberReadResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMembers(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 모든 학교 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSchool(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSchool(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readSchool']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 해당 학교의 가입 회원 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSchoolInformation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolInvitationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSchoolInformation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readSchoolInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 학생증 승인 대기 회원 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentIdPendingMembers(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminMemberStudentIdResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentIdPendingMembers(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readStudentIdPendingMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 매칭 회원 새로고침
         * @param {RefreshMemberRequest} refreshMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshMemberMatching(refreshMemberRequest: RefreshMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberIntroResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshMemberMatching(refreshMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.refreshMemberMatching']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 매칭 회원 거절
         * @param {RejectMemberRequest} rejectMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectMemberMatching(rejectMemberRequest: RejectMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectMemberMatching(rejectMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rejectMemberMatching']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 작가 혹은 도서를 검색합니다
         * @param {string} text 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBooks(text: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookSearchResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBooks(text, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API(deprecated)
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAlarms(adminNotificationRequest: AdminNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAlarms(adminNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendAlarms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 개인 푸시 알림 전송 API
         * @param {AdminMemberNotificationRequest} adminMemberNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNotification(adminMemberNotificationRequest: AdminMemberNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNotification(adminMemberNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNotifications(adminNotificationRequest: AdminNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNotifications(adminNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 테스트 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSignUpAdmin(testSignUpRequest: TestSignUpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestSignUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSignUpAdmin(testSignUpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testSignUpAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 카카오 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSignUpKakao(testSignUpRequest: TestSignUpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestSignUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSignUpKakao(testSignUpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testSignUpKakao']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 도서 모든 내용(퀴즈 및 답변, 감상문) 수정
         * @param {number} memberBookId 
         * @param {MemberBookUpdateRequest} memberBookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberBook(memberBookId: number, memberBookUpdateRequest: MemberBookUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberBook(memberBookId, memberBookUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMemberBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 스타일 수정
         * @param {MemberStyleUpdateRequest} memberStyleUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberStyle(memberStyleUpdateRequest: MemberStyleUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberStyle(memberStyleUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMemberStyle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 스타일 내 기본 프로필 사진 수정
         * @param {MemberProfileImageTypeUpdateRequest} memberProfileImageTypeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest: MemberProfileImageTypeUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMemberStyleProfileImageType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 도서의 퀴즈 및 답변 수정
         * @param {number} memberBookId 
         * @param {MemberBookQuizUpdateRequest} memberBookQuizUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuiz(memberBookId: number, memberBookQuizUpdateRequest: MemberBookQuizUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuiz(memberBookId, memberBookQuizUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 도서의 감상문 수정
         * @param {number} memberBookId 
         * @param {MemberBookReviewUpdateRequest} memberBookReviewUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReview(memberBookId: number, memberBookReviewUpdateRequest: MemberBookReviewUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReview(memberBookId, memberBookReviewUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 학생증 이미지 상태 변경 API
         * @param {number} memberVerifyId 
         * @param {AdminMemberProfileStudentIdStatusUpdateRequest} adminMemberProfileStudentIdStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentIdPendingMemberStatus(memberVerifyId: number, adminMemberProfileStudentIdStatusUpdateRequest: AdminMemberProfileStudentIdStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentIdPendingMemberStatus(memberVerifyId, adminMemberProfileStudentIdStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateStudentIdPendingMemberStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 독서 퀴즈 검증 API
         * @param {QuizQuestionVerifyRequest} quizQuestionVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyQuizQuestion(quizQuestionVerifyRequest: QuizQuestionVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizQuestionVerifyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyQuizQuestion(quizQuestionVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyQuizQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 회원 도서 등록
         * @param {MemberBookCreateRequest} memberBookCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberBook(memberBookCreateRequest: MemberBookCreateRequest, options?: any): AxiosPromise<MemberBookCreateResponse> {
            return localVarFp.addMemberBook(memberBookCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 스타일 생성
         * @param {MemberStyleCreateRequest} memberStyleCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberStyle(memberStyleCreateRequest: MemberStyleCreateRequest, options?: any): AxiosPromise<MemberStyleResponse> {
            return localVarFp.createMemberStyle(memberStyleCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 독서 퀴즈 조회 API
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuizQuestion(memberBookId: number, options?: any): AxiosPromise<QuizQuestionReadResponse> {
            return localVarFp.createQuizQuestion(memberBookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 도서 삭제
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberBook(memberBookId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMemberBook(memberBookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상대방으로부터 받은 초대코드를 입력합니다
         * @param {InvitationCodeEntryRequest} invitationCodeEntryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryInvitationCode(invitationCodeEntryRequest: InvitationCodeEntryRequest, options?: any): AxiosPromise<InvitationResponse> {
            return localVarFp.entryInvitationCode(invitationCodeEntryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 프로필의 상태 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberStatuses(options?: any): AxiosPromise<AdminMemberProfileStatusResponse> {
            return localVarFp.getMemberStatuses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매칭 회원 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendation(options?: any): AxiosPromise<MemberIntroResponse> {
            return localVarFp.getRecommendation(options).then((request) => request(axios, basePath));
        },
        /**
         * 관리자 로그인을 합니다.
         * @summary 관리자 로그인
         * @param {AdminLoginRequest} adminLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login1(adminLoginRequest: AdminLoginRequest, options?: any): AxiosPromise<AdminLoginResponse> {
            return localVarFp.login1(adminLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 관리자 로그아웃을 합니다.
         * @summary 관리자 로그아웃
         * @param {AdminLogoutRequest} adminLogoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(adminLogoutRequest: AdminLogoutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.logout(adminLogoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인앱결제 API입니다
         * @param {ApplePaymentInAppPurchaseRequest} applePaymentInAppPurchaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookmarkForApple(applePaymentInAppPurchaseRequest: ApplePaymentInAppPurchaseRequest, options?: any): AxiosPromise<PaymentPurchaseResponse> {
            return localVarFp.orderBookmarkForApple(applePaymentInAppPurchaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderBookmarkForGoogleRequest} orderBookmarkForGoogleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookmarkForGoogle(orderBookmarkForGoogleRequest: OrderBookmarkForGoogleRequest, options?: any): AxiosPromise<PaymentPurchaseResponse> {
            return localVarFp.orderBookmarkForGoogle(orderBookmarkForGoogleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 탈퇴 회원 목록 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDeletedMembers(pageable: Pageable, options?: any): AxiosPromise<AdminMemberReadResponses> {
            return localVarFp.readDeletedMembers(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원이 가진 초대코드를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readInvitationCode(options?: any): AxiosPromise<MemberInvitationResponse> {
            return localVarFp.readInvitationCode(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 도서 상세 조회
         * @param {number} memberBookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBook(memberBookId: number, options?: any): AxiosPromise<MemberBookReadResponse> {
            return localVarFp.readMemberBook(memberBookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원의 모든 도서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBooks(options?: any): AxiosPromise<MemberBookReadResponses> {
            return localVarFp.readMemberBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 서재 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfile1(options?: any): AxiosPromise<MyLibraryReadResponse> {
            return localVarFp.readMemberProfile1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 상대 서재 조회
         * @param {number} targetMemberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileByTarget(targetMemberId: number, options?: any): AxiosPromise<OtherLibraryReadResponse> {
            return localVarFp.readMemberProfileByTarget(targetMemberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자와 같은 성별의 기본 프로필 설정 값들을 읽어들입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileGenderTypes(options?: any): AxiosPromise<ProfileImageTypeReadResponse> {
            return localVarFp.readMemberProfileGenderTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 스타일 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStyle(options?: any): AxiosPromise<MemberStyleResponse> {
            return localVarFp.readMemberStyle(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 전체 조회
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMembers(pageable: Pageable, options?: any): AxiosPromise<AdminMemberReadResponses> {
            return localVarFp.readMembers(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모든 학교 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSchool(options?: any): AxiosPromise<SchoolReadResponse> {
            return localVarFp.readSchool(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 학교의 가입 회원 목록을 반환
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSchoolInformation(options?: any): AxiosPromise<SchoolInvitationResponse> {
            return localVarFp.readSchoolInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 학생증 승인 대기 회원 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentIdPendingMembers(pageable: Pageable, options?: any): AxiosPromise<AdminMemberStudentIdResponses> {
            return localVarFp.readStudentIdPendingMembers(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매칭 회원 새로고침
         * @param {RefreshMemberRequest} refreshMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshMemberMatching(refreshMemberRequest: RefreshMemberRequest, options?: any): AxiosPromise<MemberIntroResponse> {
            return localVarFp.refreshMemberMatching(refreshMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매칭 회원 거절
         * @param {RejectMemberRequest} rejectMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectMemberMatching(rejectMemberRequest: RejectMemberRequest, options?: any): AxiosPromise<void> {
            return localVarFp.rejectMemberMatching(rejectMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 작가 혹은 도서를 검색합니다
         * @param {string} text 
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBooks(text: string, size?: number, page?: number, options?: any): AxiosPromise<BookSearchResponses> {
            return localVarFp.searchBooks(text, size, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API(deprecated)
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAlarms(adminNotificationRequest: AdminNotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendAlarms(adminNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개인 푸시 알림 전송 API
         * @param {AdminMemberNotificationRequest} adminMemberNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification(adminMemberNotificationRequest: AdminMemberNotificationRequest, options?: any): AxiosPromise<Array<NotificationResponse>> {
            return localVarFp.sendNotification(adminMemberNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 광고 동의 회원 대상 푸시 알림 전송 API
         * @param {AdminNotificationRequest} adminNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotifications(adminNotificationRequest: AdminNotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendNotifications(adminNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 테스트 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSignUpAdmin(testSignUpRequest: TestSignUpRequest, options?: any): AxiosPromise<TestSignUpResponse> {
            return localVarFp.testSignUpAdmin(testSignUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 회원 토큰 발급
         * @param {TestSignUpRequest} testSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSignUpKakao(testSignUpRequest: TestSignUpRequest, options?: any): AxiosPromise<TestSignUpResponse> {
            return localVarFp.testSignUpKakao(testSignUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 도서 모든 내용(퀴즈 및 답변, 감상문) 수정
         * @param {number} memberBookId 
         * @param {MemberBookUpdateRequest} memberBookUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberBook(memberBookId: number, memberBookUpdateRequest: MemberBookUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberBook(memberBookId, memberBookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 스타일 수정
         * @param {MemberStyleUpdateRequest} memberStyleUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStyle(memberStyleUpdateRequest: MemberStyleUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberStyle(memberStyleUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 스타일 내 기본 프로필 사진 수정
         * @param {MemberProfileImageTypeUpdateRequest} memberProfileImageTypeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest: MemberProfileImageTypeUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 도서의 퀴즈 및 답변 수정
         * @param {number} memberBookId 
         * @param {MemberBookQuizUpdateRequest} memberBookQuizUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuiz(memberBookId: number, memberBookQuizUpdateRequest: MemberBookQuizUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateQuiz(memberBookId, memberBookQuizUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 도서의 감상문 수정
         * @param {number} memberBookId 
         * @param {MemberBookReviewUpdateRequest} memberBookReviewUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview(memberBookId: number, memberBookReviewUpdateRequest: MemberBookReviewUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateReview(memberBookId, memberBookReviewUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 학생증 이미지 상태 변경 API
         * @param {number} memberVerifyId 
         * @param {AdminMemberProfileStudentIdStatusUpdateRequest} adminMemberProfileStudentIdStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentIdPendingMemberStatus(memberVerifyId: number, adminMemberProfileStudentIdStatusUpdateRequest: AdminMemberProfileStudentIdStatusUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateStudentIdPendingMemberStatus(memberVerifyId, adminMemberProfileStudentIdStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 독서 퀴즈 검증 API
         * @param {QuizQuestionVerifyRequest} quizQuestionVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyQuizQuestion(quizQuestionVerifyRequest: QuizQuestionVerifyRequest, options?: any): AxiosPromise<QuizQuestionVerifyResponse> {
            return localVarFp.verifyQuizQuestion(quizQuestionVerifyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 회원 도서 등록
     * @param {MemberBookCreateRequest} memberBookCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMemberBook(memberBookCreateRequest: MemberBookCreateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addMemberBook(memberBookCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 스타일 생성
     * @param {MemberStyleCreateRequest} memberStyleCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMemberStyle(memberStyleCreateRequest: MemberStyleCreateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMemberStyle(memberStyleCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 독서 퀴즈 조회 API
     * @param {number} memberBookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuizQuestion(memberBookId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuizQuestion(memberBookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 도서 삭제
     * @param {number} memberBookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMemberBook(memberBookId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMemberBook(memberBookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상대방으로부터 받은 초대코드를 입력합니다
     * @param {InvitationCodeEntryRequest} invitationCodeEntryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public entryInvitationCode(invitationCodeEntryRequest: InvitationCodeEntryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).entryInvitationCode(invitationCodeEntryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 프로필의 상태 목록 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMemberStatuses(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMemberStatuses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매칭 회원 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecommendation(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecommendation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 관리자 로그인을 합니다.
     * @summary 관리자 로그인
     * @param {AdminLoginRequest} adminLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login1(adminLoginRequest: AdminLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login1(adminLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 관리자 로그아웃을 합니다.
     * @summary 관리자 로그아웃
     * @param {AdminLogoutRequest} adminLogoutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(adminLogoutRequest: AdminLogoutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(adminLogoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인앱결제 API입니다
     * @param {ApplePaymentInAppPurchaseRequest} applePaymentInAppPurchaseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderBookmarkForApple(applePaymentInAppPurchaseRequest: ApplePaymentInAppPurchaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).orderBookmarkForApple(applePaymentInAppPurchaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderBookmarkForGoogleRequest} orderBookmarkForGoogleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderBookmarkForGoogle(orderBookmarkForGoogleRequest: OrderBookmarkForGoogleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).orderBookmarkForGoogle(orderBookmarkForGoogleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 탈퇴 회원 목록 조회 API
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readDeletedMembers(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readDeletedMembers(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원이 가진 초대코드를 조회합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readInvitationCode(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readInvitationCode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 도서 상세 조회
     * @param {number} memberBookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberBook(memberBookId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberBook(memberBookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원의 모든 도서 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberBooks(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 서재 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberProfile1(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberProfile1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 상대 서재 조회
     * @param {number} targetMemberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberProfileByTarget(targetMemberId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberProfileByTarget(targetMemberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자와 같은 성별의 기본 프로필 설정 값들을 읽어들입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberProfileGenderTypes(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberProfileGenderTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 스타일 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMemberStyle(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMemberStyle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 전체 조회
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMembers(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMembers(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모든 학교 목록을 반환
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readSchool(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readSchool(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 학교의 가입 회원 목록을 반환
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readSchoolInformation(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readSchoolInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 학생증 승인 대기 회원 조회 API
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readStudentIdPendingMembers(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readStudentIdPendingMembers(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매칭 회원 새로고침
     * @param {RefreshMemberRequest} refreshMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshMemberMatching(refreshMemberRequest: RefreshMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshMemberMatching(refreshMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매칭 회원 거절
     * @param {RejectMemberRequest} rejectMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rejectMemberMatching(rejectMemberRequest: RejectMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rejectMemberMatching(rejectMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 작가 혹은 도서를 검색합니다
     * @param {string} text 
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchBooks(text: string, size?: number, page?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchBooks(text, size, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 광고 동의 회원 대상 푸시 알림 전송 API(deprecated)
     * @param {AdminNotificationRequest} adminNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAlarms(adminNotificationRequest: AdminNotificationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAlarms(adminNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개인 푸시 알림 전송 API
     * @param {AdminMemberNotificationRequest} adminMemberNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendNotification(adminMemberNotificationRequest: AdminMemberNotificationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendNotification(adminMemberNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 광고 동의 회원 대상 푸시 알림 전송 API
     * @param {AdminNotificationRequest} adminNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendNotifications(adminNotificationRequest: AdminNotificationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendNotifications(adminNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 테스트 회원 토큰 발급
     * @param {TestSignUpRequest} testSignUpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testSignUpAdmin(testSignUpRequest: TestSignUpRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testSignUpAdmin(testSignUpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 회원 토큰 발급
     * @param {TestSignUpRequest} testSignUpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testSignUpKakao(testSignUpRequest: TestSignUpRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testSignUpKakao(testSignUpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 도서 모든 내용(퀴즈 및 답변, 감상문) 수정
     * @param {number} memberBookId 
     * @param {MemberBookUpdateRequest} memberBookUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMemberBook(memberBookId: number, memberBookUpdateRequest: MemberBookUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMemberBook(memberBookId, memberBookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 스타일 수정
     * @param {MemberStyleUpdateRequest} memberStyleUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMemberStyle(memberStyleUpdateRequest: MemberStyleUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMemberStyle(memberStyleUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 스타일 내 기본 프로필 사진 수정
     * @param {MemberProfileImageTypeUpdateRequest} memberProfileImageTypeUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest: MemberProfileImageTypeUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMemberStyleProfileImageType(memberProfileImageTypeUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 도서의 퀴즈 및 답변 수정
     * @param {number} memberBookId 
     * @param {MemberBookQuizUpdateRequest} memberBookQuizUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuiz(memberBookId: number, memberBookQuizUpdateRequest: MemberBookQuizUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuiz(memberBookId, memberBookQuizUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 도서의 감상문 수정
     * @param {number} memberBookId 
     * @param {MemberBookReviewUpdateRequest} memberBookReviewUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReview(memberBookId: number, memberBookReviewUpdateRequest: MemberBookReviewUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateReview(memberBookId, memberBookReviewUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 학생증 이미지 상태 변경 API
     * @param {number} memberVerifyId 
     * @param {AdminMemberProfileStudentIdStatusUpdateRequest} adminMemberProfileStudentIdStatusUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudentIdPendingMemberStatus(memberVerifyId: number, adminMemberProfileStudentIdStatusUpdateRequest: AdminMemberProfileStudentIdStatusUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStudentIdPendingMemberStatus(memberVerifyId, adminMemberProfileStudentIdStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 독서 퀴즈 검증 API
     * @param {QuizQuestionVerifyRequest} quizQuestionVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyQuizQuestion(quizQuestionVerifyRequest: QuizQuestionVerifyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyQuizQuestion(quizQuestionVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} oAuthType 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (oAuthType: string, loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuthType' is not null or undefined
            assertParamExists('login', 'oAuthType', oAuthType)
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login/{oAuthType}`
                .replace(`{${"oAuthType"}}`, encodeURIComponent(String(oAuthType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} oAuthType 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(oAuthType: string, loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(oAuthType, loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} oAuthType 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(oAuthType: string, loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.login(oAuthType, loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} oAuthType 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(oAuthType: string, loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(oAuthType, loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AwsControllerApi - axios parameter creator
 * @export
 */
export const AwsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uploadType 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getS3PresignedUrl: async (uploadType: string, fileName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadType' is not null or undefined
            assertParamExists('getS3PresignedUrl', 'uploadType', uploadType)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('getS3PresignedUrl', 'fileName', fileName)
            const localVarPath = `/aws/s3/presigned-url/{uploadType}`
                .replace(`{${"uploadType"}}`, encodeURIComponent(String(uploadType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsControllerApi - functional programming interface
 * @export
 */
export const AwsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AwsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uploadType 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getS3PresignedUrl(uploadType: string, fileName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3PresignedUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getS3PresignedUrl(uploadType, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsControllerApi.getS3PresignedUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AwsControllerApi - factory interface
 * @export
 */
export const AwsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AwsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uploadType 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getS3PresignedUrl(uploadType: string, fileName: string, options?: any): AxiosPromise<S3PresignedUrlResponse> {
            return localVarFp.getS3PresignedUrl(uploadType, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsControllerApi - object-oriented interface
 * @export
 * @class AwsControllerApi
 * @extends {BaseAPI}
 */
export class AwsControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} uploadType 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsControllerApi
     */
    public getS3PresignedUrl(uploadType: string, fileName: string, options?: RawAxiosRequestConfig) {
        return AwsControllerApiFp(this.configuration).getS3PresignedUrl(uploadType, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatRoomControllerApi - axios parameter creator
 * @export
 */
export const ChatRoomControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitChatRoom: async (roomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('exitChatRoom', 'roomId', roomId)
            const localVarPath = `/chat/room/exit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRoomByPostcardId: async (postcardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardId' is not null or undefined
            assertParamExists('getChatRoomByPostcardId', 'postcardId', postcardId)
            const localVarPath = `/chat/room/postcard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (postcardId !== undefined) {
                localVarQueryParameter['postcardId'] = postcardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRoomList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} isAlert 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIsAlert: async (isAlert: boolean, roomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isAlert' is not null or undefined
            assertParamExists('setIsAlert', 'isAlert', isAlert)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('setIsAlert', 'roomId', roomId)
            const localVarPath = `/chat/room/alert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isAlert !== undefined) {
                localVarQueryParameter['isAlert'] = isAlert;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatRoomControllerApi - functional programming interface
 * @export
 */
export const ChatRoomControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatRoomControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exitChatRoom(roomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exitChatRoom(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatRoomControllerApi.exitChatRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatRoomByPostcardId(postcardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatRoomByPostcardId(postcardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatRoomControllerApi.getChatRoomByPostcardId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatRoomList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatRoomResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatRoomList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatRoomControllerApi.getChatRoomList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} isAlert 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setIsAlert(isAlert: boolean, roomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setIsAlert(isAlert, roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatRoomControllerApi.setIsAlert']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatRoomControllerApi - factory interface
 * @export
 */
export const ChatRoomControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatRoomControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitChatRoom(roomId: number, options?: any): AxiosPromise<object> {
            return localVarFp.exitChatRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRoomByPostcardId(postcardId: number, options?: any): AxiosPromise<ChatRoomResponse> {
            return localVarFp.getChatRoomByPostcardId(postcardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRoomList(options?: any): AxiosPromise<Array<ChatRoomResponse>> {
            return localVarFp.getChatRoomList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} isAlert 
         * @param {number} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIsAlert(isAlert: boolean, roomId: number, options?: any): AxiosPromise<object> {
            return localVarFp.setIsAlert(isAlert, roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatRoomControllerApi - object-oriented interface
 * @export
 * @class ChatRoomControllerApi
 * @extends {BaseAPI}
 */
export class ChatRoomControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatRoomControllerApi
     */
    public exitChatRoom(roomId: number, options?: RawAxiosRequestConfig) {
        return ChatRoomControllerApiFp(this.configuration).exitChatRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} postcardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatRoomControllerApi
     */
    public getChatRoomByPostcardId(postcardId: number, options?: RawAxiosRequestConfig) {
        return ChatRoomControllerApiFp(this.configuration).getChatRoomByPostcardId(postcardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatRoomControllerApi
     */
    public getChatRoomList(options?: RawAxiosRequestConfig) {
        return ChatRoomControllerApiFp(this.configuration).getChatRoomList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} isAlert 
     * @param {number} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatRoomControllerApi
     */
    public setIsAlert(isAlert: boolean, roomId: number, options?: RawAxiosRequestConfig) {
        return ChatRoomControllerApiFp(this.configuration).setIsAlert(isAlert, roomId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberBlockControllerApi - axios parameter creator
 * @export
 */
export const MemberBlockControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MemberBlockCreateRequest} memberBlockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberBlock: async (memberBlockCreateRequest: MemberBlockCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBlockCreateRequest' is not null or undefined
            assertParamExists('addMemberBlock', 'memberBlockCreateRequest', memberBlockCreateRequest)
            const localVarPath = `/member-blocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberBlockCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} memberBlockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberBlock: async (memberBlockId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBlockId' is not null or undefined
            assertParamExists('deleteMemberBlock', 'memberBlockId', memberBlockId)
            const localVarPath = `/member-blocks/{memberBlockId}`
                .replace(`{${"memberBlockId"}}`, encodeURIComponent(String(memberBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBlock: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-blocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberBlockControllerApi - functional programming interface
 * @export
 */
export const MemberBlockControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberBlockControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MemberBlockCreateRequest} memberBlockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberBlock(memberBlockCreateRequest: MemberBlockCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBlockCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberBlock(memberBlockCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberBlockControllerApi.addMemberBlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} memberBlockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberBlock(memberBlockId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBlockDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberBlock(memberBlockId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberBlockControllerApi.deleteMemberBlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberBlock(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBlockReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberBlock(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberBlockControllerApi.readMemberBlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberBlockControllerApi - factory interface
 * @export
 */
export const MemberBlockControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberBlockControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {MemberBlockCreateRequest} memberBlockCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberBlock(memberBlockCreateRequest: MemberBlockCreateRequest, options?: any): AxiosPromise<MemberBlockCreateResponse> {
            return localVarFp.addMemberBlock(memberBlockCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} memberBlockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberBlock(memberBlockId: number, options?: any): AxiosPromise<MemberBlockDeleteResponse> {
            return localVarFp.deleteMemberBlock(memberBlockId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberBlock(options?: any): AxiosPromise<MemberBlockReadResponse> {
            return localVarFp.readMemberBlock(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberBlockControllerApi - object-oriented interface
 * @export
 * @class MemberBlockControllerApi
 * @extends {BaseAPI}
 */
export class MemberBlockControllerApi extends BaseAPI {
    /**
     * 
     * @param {MemberBlockCreateRequest} memberBlockCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberBlockControllerApi
     */
    public addMemberBlock(memberBlockCreateRequest: MemberBlockCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberBlockControllerApiFp(this.configuration).addMemberBlock(memberBlockCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} memberBlockId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberBlockControllerApi
     */
    public deleteMemberBlock(memberBlockId: number, options?: RawAxiosRequestConfig) {
        return MemberBlockControllerApiFp(this.configuration).deleteMemberBlock(memberBlockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberBlockControllerApi
     */
    public readMemberBlock(options?: RawAxiosRequestConfig) {
        return MemberBlockControllerApiFp(this.configuration).readMemberBlock(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberControllerApi - axios parameter creator
 * @export
 */
export const MemberControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 탈퇴 시점(deletedAt)을 저장한 뒤에 30일 뒤에 회원 정보 삭제
         * @summary 사용자 계정 탈퇴 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 잔여 애드몹 개수 조회
         * @summary 애드몹 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmob: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/me/admob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemberBookProfileRequestDto} memberBookProfileRequestDto 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMembersProfile: async (memberBookProfileRequestDto: MemberBookProfileRequestDto, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberBookProfileRequestDto' is not null or undefined
            assertParamExists('getAllMembersProfile', 'memberBookProfileRequestDto', memberBookProfileRequestDto)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllMembersProfile', 'pageable', pageable)
            const localVarPath = `/members/all-other-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (memberBookProfileRequestDto !== undefined) {
                for (const [key, value] of Object.entries(memberBookProfileRequestDto)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 책갈피 개수 조회 (기존:\'/members/postcards\')
         * @summary 사용자 Bookmark 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberBookmarkCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/bookmarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 oauth 정보, 타입, 상태 등을 조회<br>memberType : [APPLE, KAKAO, ADMIN]<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본인의 회원정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberInformation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/me/information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 상태를 조회<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 본인의 회원정보 수정
         * @param {MemberInformationUpdateRequest} memberInformationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberInformation: async (memberInformationUpdateRequest: MemberInformationUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberInformationUpdateRequest' is not null or undefined
            assertParamExists('updateMemberInformation', 'memberInformationUpdateRequest', memberInformationUpdateRequest)
            const localVarPath = `/members/me/information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberInformationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멤버 상태 업데이트 API
         * @param {MemberStatusUpdateRequest} memberStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStatus: async (memberStatusUpdateRequest: MemberStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberStatusUpdateRequest' is not null or undefined
            assertParamExists('updateMemberStatus', 'memberStatusUpdateRequest', memberStatusUpdateRequest)
            const localVarPath = `/members/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 애드몹 개수 소진 위해 해당 API 호출
         * @summary 애드몹 소진
         * @param {MemberAdmobRequest} memberAdmobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchAdmob: async (memberAdmobRequest: MemberAdmobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberAdmobRequest' is not null or undefined
            assertParamExists('watchAdmob', 'memberAdmobRequest', memberAdmobRequest)
            const localVarPath = `/members/me/admob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberAdmobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberControllerApi - functional programming interface
 * @export
 */
export const MemberControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 탈퇴 시점(deletedAt)을 저장한 뒤에 30일 뒤에 회원 정보 삭제
         * @summary 사용자 계정 탈퇴 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.deleteMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 잔여 애드몹 개수 조회
         * @summary 애드몹 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmob(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBookmarkAdmobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmob(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.getAdmob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MemberBookProfileRequestDto} memberBookProfileRequestDto 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMembersProfile(memberBookProfileRequestDto: MemberBookProfileRequestDto, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMemberBookProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMembersProfile(memberBookProfileRequestDto, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.getAllMembersProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 책갈피 개수 조회 (기존:\'/members/postcards\')
         * @summary 사용자 Bookmark 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberBookmarkCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberBookmarkCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.memberBookmarkCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 oauth 정보, 타입, 상태 등을 조회<br>memberType : [APPLE, KAKAO, ADMIN]<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMember(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMember(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.readMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본인의 회원정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberInformation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInformationReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberInformation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.readMemberInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 상태를 조회<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.readMemberStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 본인의 회원정보 수정
         * @param {MemberInformationUpdateRequest} memberInformationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberInformation(memberInformationUpdateRequest: MemberInformationUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberInformation(memberInformationUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.updateMemberInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 멤버 상태 업데이트 API
         * @param {MemberStatusUpdateRequest} memberStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberStatus(memberStatusUpdateRequest: MemberStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberStatus(memberStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.updateMemberStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 애드몹 개수 소진 위해 해당 API 호출
         * @summary 애드몹 소진
         * @param {MemberAdmobRequest} memberAdmobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchAdmob(memberAdmobRequest: MemberAdmobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBookmarkAdmobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchAdmob(memberAdmobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberControllerApi.watchAdmob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberControllerApi - factory interface
 * @export
 */
export const MemberControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberControllerApiFp(configuration)
    return {
        /**
         * 탈퇴 시점(deletedAt)을 저장한 뒤에 30일 뒤에 회원 정보 삭제
         * @summary 사용자 계정 탈퇴 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(options?: any): AxiosPromise<MemberDeleteResponse> {
            return localVarFp.deleteMember(options).then((request) => request(axios, basePath));
        },
        /**
         * 잔여 애드몹 개수 조회
         * @summary 애드몹 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmob(options?: any): AxiosPromise<MemberBookmarkAdmobResponse> {
            return localVarFp.getAdmob(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MemberBookProfileRequestDto} memberBookProfileRequestDto 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMembersProfile(memberBookProfileRequestDto: MemberBookProfileRequestDto, pageable: Pageable, options?: any): AxiosPromise<PageMemberBookProfileResponse> {
            return localVarFp.getAllMembersProfile(memberBookProfileRequestDto, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 책갈피 개수 조회 (기존:\'/members/postcards\')
         * @summary 사용자 Bookmark 개수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberBookmarkCount(options?: any): AxiosPromise<number> {
            return localVarFp.memberBookmarkCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 oauth 정보, 타입, 상태 등을 조회<br>memberType : [APPLE, KAKAO, ADMIN]<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember(options?: any): AxiosPromise<MemberResponse> {
            return localVarFp.readMember(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본인의 회원정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberInformation(options?: any): AxiosPromise<MemberInformationReadResponse> {
            return localVarFp.readMemberInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 상태를 조회<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
         * @summary 사용자 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStatus(options?: any): AxiosPromise<MemberStatusResponse> {
            return localVarFp.readMemberStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 본인의 회원정보 수정
         * @param {MemberInformationUpdateRequest} memberInformationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberInformation(memberInformationUpdateRequest: MemberInformationUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberInformation(memberInformationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멤버 상태 업데이트 API
         * @param {MemberStatusUpdateRequest} memberStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStatus(memberStatusUpdateRequest: MemberStatusUpdateRequest, options?: any): AxiosPromise<MemberStatusResponse> {
            return localVarFp.updateMemberStatus(memberStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 애드몹 개수 소진 위해 해당 API 호출
         * @summary 애드몹 소진
         * @param {MemberAdmobRequest} memberAdmobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchAdmob(memberAdmobRequest: MemberAdmobRequest, options?: any): AxiosPromise<MemberBookmarkAdmobResponse> {
            return localVarFp.watchAdmob(memberAdmobRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberControllerApi - object-oriented interface
 * @export
 * @class MemberControllerApi
 * @extends {BaseAPI}
 */
export class MemberControllerApi extends BaseAPI {
    /**
     * 탈퇴 시점(deletedAt)을 저장한 뒤에 30일 뒤에 회원 정보 삭제
     * @summary 사용자 계정 탈퇴 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public deleteMember(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).deleteMember(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 잔여 애드몹 개수 조회
     * @summary 애드몹 개수 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public getAdmob(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).getAdmob(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MemberBookProfileRequestDto} memberBookProfileRequestDto 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public getAllMembersProfile(memberBookProfileRequestDto: MemberBookProfileRequestDto, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).getAllMembersProfile(memberBookProfileRequestDto, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 책갈피 개수 조회 (기존:\'/members/postcards\')
     * @summary 사용자 Bookmark 개수 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public memberBookmarkCount(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).memberBookmarkCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 oauth 정보, 타입, 상태 등을 조회<br>memberType : [APPLE, KAKAO, ADMIN]<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
     * @summary 사용자 정보 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public readMember(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).readMember(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본인의 회원정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public readMemberInformation(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).readMemberInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 상태를 조회<br>memberStatus : [PROFILE, APPROVAL, STYLE, BOOK, COMPLETED, DELETED, BLOCKED, MATCHING_DISABLED, REPORTED]
     * @summary 사용자 상태 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public readMemberStatus(options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).readMemberStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 본인의 회원정보 수정
     * @param {MemberInformationUpdateRequest} memberInformationUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public updateMemberInformation(memberInformationUpdateRequest: MemberInformationUpdateRequest, options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).updateMemberInformation(memberInformationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멤버 상태 업데이트 API
     * @param {MemberStatusUpdateRequest} memberStatusUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public updateMemberStatus(memberStatusUpdateRequest: MemberStatusUpdateRequest, options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).updateMemberStatus(memberStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 애드몹 개수 소진 위해 해당 API 호출
     * @summary 애드몹 소진
     * @param {MemberAdmobRequest} memberAdmobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberControllerApi
     */
    public watchAdmob(memberAdmobRequest: MemberAdmobRequest, options?: RawAxiosRequestConfig) {
        return MemberControllerApiFp(this.configuration).watchAdmob(memberAdmobRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberEmailControllerApi - axios parameter creator
 * @export
 */
export const MemberEmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 학교 이메일 인증을 위해 인증 코드를 전송<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 전송 API
         * @param {MemberEmailSendRequest} memberEmailSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: async (memberEmailSendRequest: MemberEmailSendRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberEmailSendRequest' is not null or undefined
            assertParamExists('sendEmail', 'memberEmailSendRequest', memberEmailSendRequest)
            const localVarPath = `/members/emails/sends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberEmailSendRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 학교 이메일 인증을 위해 인증 코드를 검증<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 확인 API
         * @param {MemberEmailVerifyRequest} memberEmailVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (memberEmailVerifyRequest: MemberEmailVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberEmailVerifyRequest' is not null or undefined
            assertParamExists('verifyEmail', 'memberEmailVerifyRequest', memberEmailVerifyRequest)
            const localVarPath = `/members/emails/verifys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberEmailVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberEmailControllerApi - functional programming interface
 * @export
 */
export const MemberEmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberEmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 학교 이메일 인증을 위해 인증 코드를 전송<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 전송 API
         * @param {MemberEmailSendRequest} memberEmailSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmail(memberEmailSendRequest: MemberEmailSendRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmail(memberEmailSendRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberEmailControllerApi.sendEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 학교 이메일 인증을 위해 인증 코드를 검증<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 확인 API
         * @param {MemberEmailVerifyRequest} memberEmailVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(memberEmailVerifyRequest: MemberEmailVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(memberEmailVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberEmailControllerApi.verifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberEmailControllerApi - factory interface
 * @export
 */
export const MemberEmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberEmailControllerApiFp(configuration)
    return {
        /**
         * 학교 이메일 인증을 위해 인증 코드를 전송<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 전송 API
         * @param {MemberEmailSendRequest} memberEmailSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail(memberEmailSendRequest: MemberEmailSendRequest, options?: any): AxiosPromise<EmailResponse> {
            return localVarFp.sendEmail(memberEmailSendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 학교 이메일 인증을 위해 인증 코드를 검증<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
         * @summary 이메일 인증 코드 확인 API
         * @param {MemberEmailVerifyRequest} memberEmailVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(memberEmailVerifyRequest: MemberEmailVerifyRequest, options?: any): AxiosPromise<EmailResponse> {
            return localVarFp.verifyEmail(memberEmailVerifyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberEmailControllerApi - object-oriented interface
 * @export
 * @class MemberEmailControllerApi
 * @extends {BaseAPI}
 */
export class MemberEmailControllerApi extends BaseAPI {
    /**
     * 학교 이메일 인증을 위해 인증 코드를 전송<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
     * @summary 이메일 인증 코드 전송 API
     * @param {MemberEmailSendRequest} memberEmailSendRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberEmailControllerApi
     */
    public sendEmail(memberEmailSendRequest: MemberEmailSendRequest, options?: RawAxiosRequestConfig) {
        return MemberEmailControllerApiFp(this.configuration).sendEmail(memberEmailSendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 학교 이메일 인증을 위해 인증 코드를 검증<br>학교의 도메인과 학교 정보가 일치가 필요 (ex, 가천대 = @gachon.ac.kr)
     * @summary 이메일 인증 코드 확인 API
     * @param {MemberEmailVerifyRequest} memberEmailVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberEmailControllerApi
     */
    public verifyEmail(memberEmailVerifyRequest: MemberEmailVerifyRequest, options?: RawAxiosRequestConfig) {
        return MemberEmailControllerApiFp(this.configuration).verifyEmail(memberEmailVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberModalControllerApi - axios parameter creator
 * @export
 */
export const MemberModalControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 친구 초대 보상 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationRewardStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-modal/invitation-reward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 온모딩 모달 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-modal/onboarding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 친구 초대 보상 상태를 업데이트<br>memberOnboardingStatus : [NONE, BOOKMARK, COMPLETED]
         * @summary 친구 초대 보상 상태 업데이트 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvitationRewardStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-modal/invitation-reward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 온보딩 상태를 업데이트<br>memberOnboardingStatus : [HOME, LIBRARY]
         * @summary 사용자 온보딩 모달 상태 업데이트 API
         * @param {MemberOnboardingStatusRequest} memberOnboardingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOnboardingStatus: async (memberOnboardingStatusRequest: MemberOnboardingStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberOnboardingStatusRequest' is not null or undefined
            assertParamExists('updateOnboardingStatus', 'memberOnboardingStatusRequest', memberOnboardingStatusRequest)
            const localVarPath = `/member-modal/onboarding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberOnboardingStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberModalControllerApi - functional programming interface
 * @export
 */
export const MemberModalControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberModalControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 친구 초대 보상 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitationRewardStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInvitationRewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitationRewardStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberModalControllerApi.getInvitationRewardStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 사용자 온모딩 모달 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnboardingStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberOnboardingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnboardingStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberModalControllerApi.getOnboardingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 친구 초대 보상 상태를 업데이트<br>memberOnboardingStatus : [NONE, BOOKMARK, COMPLETED]
         * @summary 친구 초대 보상 상태 업데이트 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvitationRewardStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInvitationRewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInvitationRewardStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberModalControllerApi.updateInvitationRewardStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 온보딩 상태를 업데이트<br>memberOnboardingStatus : [HOME, LIBRARY]
         * @summary 사용자 온보딩 모달 상태 업데이트 API
         * @param {MemberOnboardingStatusRequest} memberOnboardingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOnboardingStatus(memberOnboardingStatusRequest: MemberOnboardingStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberOnboardingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOnboardingStatus(memberOnboardingStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberModalControllerApi.updateOnboardingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberModalControllerApi - factory interface
 * @export
 */
export const MemberModalControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberModalControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 친구 초대 보상 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationRewardStatus(options?: any): AxiosPromise<MemberInvitationRewardResponse> {
            return localVarFp.getInvitationRewardStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 온모딩 모달 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus(options?: any): AxiosPromise<MemberOnboardingStatusResponse> {
            return localVarFp.getOnboardingStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 친구 초대 보상 상태를 업데이트<br>memberOnboardingStatus : [NONE, BOOKMARK, COMPLETED]
         * @summary 친구 초대 보상 상태 업데이트 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvitationRewardStatus(options?: any): AxiosPromise<MemberInvitationRewardResponse> {
            return localVarFp.updateInvitationRewardStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 온보딩 상태를 업데이트<br>memberOnboardingStatus : [HOME, LIBRARY]
         * @summary 사용자 온보딩 모달 상태 업데이트 API
         * @param {MemberOnboardingStatusRequest} memberOnboardingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOnboardingStatus(memberOnboardingStatusRequest: MemberOnboardingStatusRequest, options?: any): AxiosPromise<MemberOnboardingStatusResponse> {
            return localVarFp.updateOnboardingStatus(memberOnboardingStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberModalControllerApi - object-oriented interface
 * @export
 * @class MemberModalControllerApi
 * @extends {BaseAPI}
 */
export class MemberModalControllerApi extends BaseAPI {
    /**
     * 
     * @summary 친구 초대 보상 상태 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberModalControllerApi
     */
    public getInvitationRewardStatus(options?: RawAxiosRequestConfig) {
        return MemberModalControllerApiFp(this.configuration).getInvitationRewardStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 온모딩 모달 상태 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberModalControllerApi
     */
    public getOnboardingStatus(options?: RawAxiosRequestConfig) {
        return MemberModalControllerApiFp(this.configuration).getOnboardingStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 친구 초대 보상 상태를 업데이트<br>memberOnboardingStatus : [NONE, BOOKMARK, COMPLETED]
     * @summary 친구 초대 보상 상태 업데이트 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberModalControllerApi
     */
    public updateInvitationRewardStatus(options?: RawAxiosRequestConfig) {
        return MemberModalControllerApiFp(this.configuration).updateInvitationRewardStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 온보딩 상태를 업데이트<br>memberOnboardingStatus : [HOME, LIBRARY]
     * @summary 사용자 온보딩 모달 상태 업데이트 API
     * @param {MemberOnboardingStatusRequest} memberOnboardingStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberModalControllerApi
     */
    public updateOnboardingStatus(memberOnboardingStatusRequest: MemberOnboardingStatusRequest, options?: RawAxiosRequestConfig) {
        return MemberModalControllerApiFp(this.configuration).updateOnboardingStatus(memberOnboardingStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberPolicyControllerApi - axios parameter creator
 * @export
 */
export const MemberPolicyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 해당 멤버의 약관 동의를 생성
         * @summary 사용자 동의 약관 생성 API
         * @param {MemberPolicyCreateRequest} memberPolicyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberPolicies: async (memberPolicyCreateRequest: MemberPolicyCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberPolicyCreateRequest' is not null or undefined
            assertParamExists('createMemberPolicies', 'memberPolicyCreateRequest', memberPolicyCreateRequest)
            const localVarPath = `/members/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberPolicyCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 사용자의 약관 동의를 확인
         * @summary 사용자 동의 약관 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberPolicies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 사용자의 약관 동의를 수정
         * @summary 사용자 동의 약관 수정 API
         * @param {MemberPolicyUpdateRequest} memberPolicyUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberPolicies: async (memberPolicyUpdateRequest: MemberPolicyUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberPolicyUpdateRequest' is not null or undefined
            assertParamExists('updateMemberPolicies', 'memberPolicyUpdateRequest', memberPolicyUpdateRequest)
            const localVarPath = `/members/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberPolicyUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberPolicyControllerApi - functional programming interface
 * @export
 */
export const MemberPolicyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberPolicyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 해당 멤버의 약관 동의를 생성
         * @summary 사용자 동의 약관 생성 API
         * @param {MemberPolicyCreateRequest} memberPolicyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemberPolicies(memberPolicyCreateRequest: MemberPolicyCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemberPolicies(memberPolicyCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPolicyControllerApi.createMemberPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 사용자의 약관 동의를 확인
         * @summary 사용자 동의 약관 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberPolicies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberPolicies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPolicyControllerApi.readMemberPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 사용자의 약관 동의를 수정
         * @summary 사용자 동의 약관 수정 API
         * @param {MemberPolicyUpdateRequest} memberPolicyUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberPolicies(memberPolicyUpdateRequest: MemberPolicyUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberPolicies(memberPolicyUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPolicyControllerApi.updateMemberPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberPolicyControllerApi - factory interface
 * @export
 */
export const MemberPolicyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberPolicyControllerApiFp(configuration)
    return {
        /**
         * 해당 멤버의 약관 동의를 생성
         * @summary 사용자 동의 약관 생성 API
         * @param {MemberPolicyCreateRequest} memberPolicyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberPolicies(memberPolicyCreateRequest: MemberPolicyCreateRequest, options?: any): AxiosPromise<MemberPolicyResponse> {
            return localVarFp.createMemberPolicies(memberPolicyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 사용자의 약관 동의를 확인
         * @summary 사용자 동의 약관 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberPolicies(options?: any): AxiosPromise<MemberPolicyResponse> {
            return localVarFp.readMemberPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 사용자의 약관 동의를 수정
         * @summary 사용자 동의 약관 수정 API
         * @param {MemberPolicyUpdateRequest} memberPolicyUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberPolicies(memberPolicyUpdateRequest: MemberPolicyUpdateRequest, options?: any): AxiosPromise<MemberPolicyResponse> {
            return localVarFp.updateMemberPolicies(memberPolicyUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberPolicyControllerApi - object-oriented interface
 * @export
 * @class MemberPolicyControllerApi
 * @extends {BaseAPI}
 */
export class MemberPolicyControllerApi extends BaseAPI {
    /**
     * 해당 멤버의 약관 동의를 생성
     * @summary 사용자 동의 약관 생성 API
     * @param {MemberPolicyCreateRequest} memberPolicyCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPolicyControllerApi
     */
    public createMemberPolicies(memberPolicyCreateRequest: MemberPolicyCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberPolicyControllerApiFp(this.configuration).createMemberPolicies(memberPolicyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 사용자의 약관 동의를 확인
     * @summary 사용자 동의 약관 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPolicyControllerApi
     */
    public readMemberPolicies(options?: RawAxiosRequestConfig) {
        return MemberPolicyControllerApiFp(this.configuration).readMemberPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 사용자의 약관 동의를 수정
     * @summary 사용자 동의 약관 수정 API
     * @param {MemberPolicyUpdateRequest} memberPolicyUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPolicyControllerApi
     */
    public updateMemberPolicies(memberPolicyUpdateRequest: MemberPolicyUpdateRequest, options?: RawAxiosRequestConfig) {
        return MemberPolicyControllerApiFp(this.configuration).updateMemberPolicies(memberPolicyUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberProfileControllerApi - axios parameter creator
 * @export
 */
export const MemberProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 해당 사용자의 프로필 정보들을 생성<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 생성 API
         * @param {MemberProfileCreateRequest} memberProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberProfile: async (memberProfileCreateRequest: MemberProfileCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberProfileCreateRequest' is not null or undefined
            assertParamExists('createMemberProfile', 'memberProfileCreateRequest', memberProfileCreateRequest)
            const localVarPath = `/member-profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberProfileCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 학생증 검증 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberStudentIdStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-profiles/student-id/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 사용자의 프로필 정보들을 확인<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 사용자가 회원 승인할 때 필요한 상태를 조회<br>profileImageUrlStatus, studentIdImageStatus : [PENDING, DENIAL, DONE]<br>openKakaoRoomStatus : [PENDING, INACCESSIBLE, NOT_DEFAULT, DONE]
         * @summary 사용자 프로필 정보 中 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-profiles/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 사용자의 프로필 정보들을 수정<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 수정 API
         * @param {MemberProfileUpdateRequest} memberProfileUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberProfile: async (memberProfileUpdateRequest: MemberProfileUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberProfileUpdateRequest' is not null or undefined
            assertParamExists('updateMemberProfile', 'memberProfileUpdateRequest', memberProfileUpdateRequest)
            const localVarPath = `/member-profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberProfileUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 학생증 이미지 저장 API
         * @param {MemberProfileStudentIdImageUrlUpdateRequest} memberProfileStudentIdImageUrlUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStudentIdImage: async (memberProfileStudentIdImageUrlUpdateRequest: MemberProfileStudentIdImageUrlUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberProfileStudentIdImageUrlUpdateRequest' is not null or undefined
            assertParamExists('updateMemberStudentIdImage', 'memberProfileStudentIdImageUrlUpdateRequest', memberProfileStudentIdImageUrlUpdateRequest)
            const localVarPath = `/member-profiles/student-id/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberProfileStudentIdImageUrlUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 닉네임 검증 API
         * @param {MemberNameVerifyRequest} memberNameVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMemberName: async (memberNameVerifyRequest: MemberNameVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberNameVerifyRequest' is not null or undefined
            assertParamExists('verifyMemberName', 'memberNameVerifyRequest', memberNameVerifyRequest)
            const localVarPath = `/member-profiles/verify/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberNameVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberProfileControllerApi - functional programming interface
 * @export
 */
export const MemberProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 해당 사용자의 프로필 정보들을 생성<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 생성 API
         * @param {MemberProfileCreateRequest} memberProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemberProfile(memberProfileCreateRequest: MemberProfileCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemberProfile(memberProfileCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.createMemberProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 사용자 학생증 검증 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberStudentIdStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberProfileStudentIdReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberStudentIdStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.getMemberStudentIdStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 사용자의 프로필 정보들을 확인<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.readMemberProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 사용자가 회원 승인할 때 필요한 상태를 조회<br>profileImageUrlStatus, studentIdImageStatus : [PENDING, DENIAL, DONE]<br>openKakaoRoomStatus : [PENDING, INACCESSIBLE, NOT_DEFAULT, DONE]
         * @summary 사용자 프로필 정보 中 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberProfileStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberProfileStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberProfileStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.readMemberProfileStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 사용자의 프로필 정보들을 수정<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 수정 API
         * @param {MemberProfileUpdateRequest} memberProfileUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberProfile(memberProfileUpdateRequest: MemberProfileUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberProfile(memberProfileUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.updateMemberProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 사용자 학생증 이미지 저장 API
         * @param {MemberProfileStudentIdImageUrlUpdateRequest} memberProfileStudentIdImageUrlUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest: MemberProfileStudentIdImageUrlUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.updateMemberStudentIdImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 사용자 닉네임 검증 API
         * @param {MemberNameVerifyRequest} memberNameVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMemberName(memberNameVerifyRequest: MemberNameVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberNameVerifyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMemberName(memberNameVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberProfileControllerApi.verifyMemberName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberProfileControllerApi - factory interface
 * @export
 */
export const MemberProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberProfileControllerApiFp(configuration)
    return {
        /**
         * 해당 사용자의 프로필 정보들을 생성<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 생성 API
         * @param {MemberProfileCreateRequest} memberProfileCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberProfile(memberProfileCreateRequest: MemberProfileCreateRequest, options?: any): AxiosPromise<MemberProfileResponse> {
            return localVarFp.createMemberProfile(memberProfileCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 학생증 검증 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberStudentIdStatus(options?: any): AxiosPromise<MemberProfileStudentIdReadResponse> {
            return localVarFp.getMemberStudentIdStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 사용자의 프로필 정보들을 확인<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfile(options?: any): AxiosPromise<MemberProfileResponse> {
            return localVarFp.readMemberProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 사용자가 회원 승인할 때 필요한 상태를 조회<br>profileImageUrlStatus, studentIdImageStatus : [PENDING, DENIAL, DONE]<br>openKakaoRoomStatus : [PENDING, INACCESSIBLE, NOT_DEFAULT, DONE]
         * @summary 사용자 프로필 정보 中 상태 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberProfileStatus(options?: any): AxiosPromise<MemberProfileStatusResponse> {
            return localVarFp.readMemberProfileStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 사용자의 프로필 정보들을 수정<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
         * @summary 사용자 프로필 정보 수정 API
         * @param {MemberProfileUpdateRequest} memberProfileUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberProfile(memberProfileUpdateRequest: MemberProfileUpdateRequest, options?: any): AxiosPromise<MemberProfileResponse> {
            return localVarFp.updateMemberProfile(memberProfileUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 학생증 이미지 저장 API
         * @param {MemberProfileStudentIdImageUrlUpdateRequest} memberProfileStudentIdImageUrlUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest: MemberProfileStudentIdImageUrlUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 닉네임 검증 API
         * @param {MemberNameVerifyRequest} memberNameVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMemberName(memberNameVerifyRequest: MemberNameVerifyRequest, options?: any): AxiosPromise<MemberNameVerifyResponse> {
            return localVarFp.verifyMemberName(memberNameVerifyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberProfileControllerApi - object-oriented interface
 * @export
 * @class MemberProfileControllerApi
 * @extends {BaseAPI}
 */
export class MemberProfileControllerApi extends BaseAPI {
    /**
     * 해당 사용자의 프로필 정보들을 생성<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
     * @summary 사용자 프로필 정보 생성 API
     * @param {MemberProfileCreateRequest} memberProfileCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public createMemberProfile(memberProfileCreateRequest: MemberProfileCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).createMemberProfile(memberProfileCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 학생증 검증 상태 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public getMemberStudentIdStatus(options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).getMemberStudentIdStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 사용자의 프로필 정보들을 확인<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
     * @summary 사용자 프로필 정보 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public readMemberProfile(options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).readMemberProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 사용자가 회원 승인할 때 필요한 상태를 조회<br>profileImageUrlStatus, studentIdImageStatus : [PENDING, DENIAL, DONE]<br>openKakaoRoomStatus : [PENDING, INACCESSIBLE, NOT_DEFAULT, DONE]
     * @summary 사용자 프로필 정보 中 상태 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public readMemberProfileStatus(options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).readMemberProfileStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 사용자의 프로필 정보들을 수정<br>gender(성별) -> [MALE, FEMALE] | schoolEmail(학교 이메일) -> abc123@gachon.ac.kr
     * @summary 사용자 프로필 정보 수정 API
     * @param {MemberProfileUpdateRequest} memberProfileUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public updateMemberProfile(memberProfileUpdateRequest: MemberProfileUpdateRequest, options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).updateMemberProfile(memberProfileUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 학생증 이미지 저장 API
     * @param {MemberProfileStudentIdImageUrlUpdateRequest} memberProfileStudentIdImageUrlUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest: MemberProfileStudentIdImageUrlUpdateRequest, options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).updateMemberStudentIdImage(memberProfileStudentIdImageUrlUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 닉네임 검증 API
     * @param {MemberNameVerifyRequest} memberNameVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberProfileControllerApi
     */
    public verifyMemberName(memberNameVerifyRequest: MemberNameVerifyRequest, options?: RawAxiosRequestConfig) {
        return MemberProfileControllerApiFp(this.configuration).verifyMemberName(memberNameVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberPushAlarmControllerApi - axios parameter creator
 * @export
 */
export const MemberPushAlarmControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 해당 회원의 푸시 알림 전체 삭제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllPushAlarm: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/push-alarms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 1개 삭제 API
         * @param {number} memberPushAlarmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushAlarm: async (memberPushAlarmId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberPushAlarmId' is not null or undefined
            assertParamExists('deletePushAlarm', 'memberPushAlarmId', memberPushAlarmId)
            const localVarPath = `/members/push-alarms/{memberPushAlarmId}`
                .replace(`{${"memberPushAlarmId"}}`, encodeURIComponent(String(memberPushAlarmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushAlarmSetting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/push-alarms/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPushAlarmPageable: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('readPushAlarmPageable', 'pageable', pageable)
            const localVarPath = `/members/push-alarms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 수정 API
         * @param {PushAlarmSettingCreateRequest} pushAlarmSettingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushAlarmSetting: async (pushAlarmSettingCreateRequest: PushAlarmSettingCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pushAlarmSettingCreateRequest' is not null or undefined
            assertParamExists('updatePushAlarmSetting', 'pushAlarmSettingCreateRequest', pushAlarmSettingCreateRequest)
            const localVarPath = `/members/push-alarms/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pushAlarmSettingCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberPushAlarmControllerApi - functional programming interface
 * @export
 */
export const MemberPushAlarmControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberPushAlarmControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 해당 회원의 푸시 알림 전체 삭제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllPushAlarm(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllPushAlarm(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPushAlarmControllerApi.deleteAllPushAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 1개 삭제 API
         * @param {number} memberPushAlarmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePushAlarm(memberPushAlarmId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePushAlarm(memberPushAlarmId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPushAlarmControllerApi.deletePushAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPushAlarmSetting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushAlarmSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPushAlarmSetting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPushAlarmControllerApi.getPushAlarmSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPushAlarmPageable(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberPushAlarmReadResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPushAlarmPageable(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPushAlarmControllerApi.readPushAlarmPageable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 수정 API
         * @param {PushAlarmSettingCreateRequest} pushAlarmSettingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePushAlarmSetting(pushAlarmSettingCreateRequest: PushAlarmSettingCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushAlarmSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePushAlarmSetting(pushAlarmSettingCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberPushAlarmControllerApi.updatePushAlarmSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberPushAlarmControllerApi - factory interface
 * @export
 */
export const MemberPushAlarmControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberPushAlarmControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 해당 회원의 푸시 알림 전체 삭제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllPushAlarm(options?: any): AxiosPromise<void> {
            return localVarFp.deleteAllPushAlarm(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 1개 삭제 API
         * @param {number} memberPushAlarmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushAlarm(memberPushAlarmId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePushAlarm(memberPushAlarmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushAlarmSetting(options?: any): AxiosPromise<PushAlarmSettingResponse> {
            return localVarFp.getPushAlarmSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPushAlarmPageable(pageable: Pageable, options?: any): AxiosPromise<MemberPushAlarmReadResponses> {
            return localVarFp.readPushAlarmPageable(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 회원의 푸시 알림 설정 수정 API
         * @param {PushAlarmSettingCreateRequest} pushAlarmSettingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushAlarmSetting(pushAlarmSettingCreateRequest: PushAlarmSettingCreateRequest, options?: any): AxiosPromise<PushAlarmSettingResponse> {
            return localVarFp.updatePushAlarmSetting(pushAlarmSettingCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberPushAlarmControllerApi - object-oriented interface
 * @export
 * @class MemberPushAlarmControllerApi
 * @extends {BaseAPI}
 */
export class MemberPushAlarmControllerApi extends BaseAPI {
    /**
     * 
     * @summary 해당 회원의 푸시 알림 전체 삭제 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPushAlarmControllerApi
     */
    public deleteAllPushAlarm(options?: RawAxiosRequestConfig) {
        return MemberPushAlarmControllerApiFp(this.configuration).deleteAllPushAlarm(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 회원의 푸시 알림 1개 삭제 API
     * @param {number} memberPushAlarmId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPushAlarmControllerApi
     */
    public deletePushAlarm(memberPushAlarmId: number, options?: RawAxiosRequestConfig) {
        return MemberPushAlarmControllerApiFp(this.configuration).deletePushAlarm(memberPushAlarmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 회원의 푸시 알림 설정 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPushAlarmControllerApi
     */
    public getPushAlarmSetting(options?: RawAxiosRequestConfig) {
        return MemberPushAlarmControllerApiFp(this.configuration).getPushAlarmSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 회원의 푸시 알림 조회 API
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPushAlarmControllerApi
     */
    public readPushAlarmPageable(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return MemberPushAlarmControllerApiFp(this.configuration).readPushAlarmPageable(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 회원의 푸시 알림 설정 수정 API
     * @param {PushAlarmSettingCreateRequest} pushAlarmSettingCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberPushAlarmControllerApi
     */
    public updatePushAlarmSetting(pushAlarmSettingCreateRequest: PushAlarmSettingCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberPushAlarmControllerApiFp(this.configuration).updatePushAlarmSetting(pushAlarmSettingCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberReportControllerApi - axios parameter creator
 * @export
 */
export const MemberReportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 상대방 신고하기
         * @param {MemberReportCreateRequest} memberReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberReport: async (memberReportCreateRequest: MemberReportCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberReportCreateRequest' is not null or undefined
            assertParamExists('addMemberReport', 'memberReportCreateRequest', memberReportCreateRequest)
            const localVarPath = `/member-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberReportCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} memberReportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberReport: async (memberReportId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberReportId' is not null or undefined
            assertParamExists('deleteMemberReport', 'memberReportId', memberReportId)
            const localVarPath = `/member-reports/{memberReportId}`
                .replace(`{${"memberReportId"}}`, encodeURIComponent(String(memberReportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 신고 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberReport: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberReportControllerApi - functional programming interface
 * @export
 */
export const MemberReportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberReportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 상대방 신고하기
         * @param {MemberReportCreateRequest} memberReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberReport(memberReportCreateRequest: MemberReportCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberReportCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberReport(memberReportCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberReportControllerApi.addMemberReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} memberReportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberReport(memberReportId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberReportDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberReport(memberReportId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberReportControllerApi.deleteMemberReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 신고 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberReport(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberReportReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberReport(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberReportControllerApi.readMemberReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberReportControllerApi - factory interface
 * @export
 */
export const MemberReportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberReportControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 상대방 신고하기
         * @param {MemberReportCreateRequest} memberReportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberReport(memberReportCreateRequest: MemberReportCreateRequest, options?: any): AxiosPromise<MemberReportCreateResponse> {
            return localVarFp.addMemberReport(memberReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} memberReportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberReport(memberReportId: number, options?: any): AxiosPromise<MemberReportDeleteResponse> {
            return localVarFp.deleteMemberReport(memberReportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 신고 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberReport(options?: any): AxiosPromise<MemberReportReadResponse> {
            return localVarFp.readMemberReport(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberReportControllerApi - object-oriented interface
 * @export
 * @class MemberReportControllerApi
 * @extends {BaseAPI}
 */
export class MemberReportControllerApi extends BaseAPI {
    /**
     * 
     * @summary 상대방 신고하기
     * @param {MemberReportCreateRequest} memberReportCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberReportControllerApi
     */
    public addMemberReport(memberReportCreateRequest: MemberReportCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberReportControllerApiFp(this.configuration).addMemberReport(memberReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} memberReportId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberReportControllerApi
     */
    public deleteMemberReport(memberReportId: number, options?: RawAxiosRequestConfig) {
        return MemberReportControllerApiFp(this.configuration).deleteMemberReport(memberReportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 신고 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberReportControllerApi
     */
    public readMemberReport(options?: RawAxiosRequestConfig) {
        return MemberReportControllerApiFp(this.configuration).readMemberReport(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MemberTokenControllerApi - axios parameter creator
 * @export
 */
export const MemberTokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 사용자가 푸시 알림을 할 때 필요한 EXPO 서버의 토큰을 저장
         * @summary 사용자의 EXPO 서버 토큰 생성 API
         * @param {MemberTokenCreateRequest} memberTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPushToken: async (memberTokenCreateRequest: MemberTokenCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberTokenCreateRequest' is not null or undefined
            assertParamExists('createPushToken', 'memberTokenCreateRequest', memberTokenCreateRequest)
            const localVarPath = `/members/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberTokenControllerApi - functional programming interface
 * @export
 */
export const MemberTokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberTokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 사용자가 푸시 알림을 할 때 필요한 EXPO 서버의 토큰을 저장
         * @summary 사용자의 EXPO 서버 토큰 생성 API
         * @param {MemberTokenCreateRequest} memberTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPushToken(memberTokenCreateRequest: MemberTokenCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPushToken(memberTokenCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MemberTokenControllerApi.createPushToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MemberTokenControllerApi - factory interface
 * @export
 */
export const MemberTokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberTokenControllerApiFp(configuration)
    return {
        /**
         * 사용자가 푸시 알림을 할 때 필요한 EXPO 서버의 토큰을 저장
         * @summary 사용자의 EXPO 서버 토큰 생성 API
         * @param {MemberTokenCreateRequest} memberTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPushToken(memberTokenCreateRequest: MemberTokenCreateRequest, options?: any): AxiosPromise<MemberTokenCreateResponse> {
            return localVarFp.createPushToken(memberTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberTokenControllerApi - object-oriented interface
 * @export
 * @class MemberTokenControllerApi
 * @extends {BaseAPI}
 */
export class MemberTokenControllerApi extends BaseAPI {
    /**
     * 사용자가 푸시 알림을 할 때 필요한 EXPO 서버의 토큰을 저장
     * @summary 사용자의 EXPO 서버 토큰 생성 API
     * @param {MemberTokenCreateRequest} memberTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberTokenControllerApi
     */
    public createPushToken(memberTokenCreateRequest: MemberTokenCreateRequest, options?: RawAxiosRequestConfig) {
        return MemberTokenControllerApiFp(this.configuration).createPushToken(memberTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentSubscriberApi - axios parameter creator
 * @export
 */
export const PaymentSubscriberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AppleNotificationRequest} appleNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveAppleNotification: async (appleNotificationRequest: AppleNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appleNotificationRequest' is not null or undefined
            assertParamExists('receiveAppleNotification', 'appleNotificationRequest', appleNotificationRequest)
            const localVarPath = `/payments/in-app/apple/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appleNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentSubscriberApi - functional programming interface
 * @export
 */
export const PaymentSubscriberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentSubscriberApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AppleNotificationRequest} appleNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveAppleNotification(appleNotificationRequest: AppleNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveAppleNotification(appleNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentSubscriberApi.receiveAppleNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentSubscriberApi - factory interface
 * @export
 */
export const PaymentSubscriberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentSubscriberApiFp(configuration)
    return {
        /**
         * 
         * @param {AppleNotificationRequest} appleNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveAppleNotification(appleNotificationRequest: AppleNotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.receiveAppleNotification(appleNotificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentSubscriberApi - object-oriented interface
 * @export
 * @class PaymentSubscriberApi
 * @extends {BaseAPI}
 */
export class PaymentSubscriberApi extends BaseAPI {
    /**
     * 
     * @param {AppleNotificationRequest} appleNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSubscriberApi
     */
    public receiveAppleNotification(appleNotificationRequest: AppleNotificationRequest, options?: RawAxiosRequestConfig) {
        return PaymentSubscriberApiFp(this.configuration).receiveAppleNotification(appleNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostcardControllerApi - axios parameter creator
 * @export
 */
export const PostcardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ACCEPT 엽서의 상대방 정보 조회
         * @summary 상대방 정보 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactInfo: async (postcardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardId' is not null or undefined
            assertParamExists('getContactInfo', 'postcardId', postcardId)
            const localVarPath = `/postcard/contact-info/{postcardId}`
                .replace(`{${"postcardId"}}`, encodeURIComponent(String(postcardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostcardTypeList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/postcard/type-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자가 보낸 엽서 조회
         * @summary 보낸 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostcardsFromMember: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/postcard/from`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자가 받은 엽서 조회
         * @summary 받은 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostcardsToMember: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/postcard/to`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendPostcardRequest} sendPostcardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcard: async (sendPostcardRequest: SendPostcardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendPostcardRequest' is not null or undefined
            assertParamExists('sendPostcard', 'sendPostcardRequest', sendPostcardRequest)
            const localVarPath = `/postcard/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendPostcardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostcardSendValidationRequest} postcardSendValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcard1: async (postcardSendValidationRequest: PostcardSendValidationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardSendValidationRequest' is not null or undefined
            assertParamExists('sendPostcard1', 'postcardSendValidationRequest', postcardSendValidationRequest)
            const localVarPath = `/postcard/send/validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postcardSendValidationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Body의 postcardId를 가진 엽서의 상태 업데이트. Body의 status 값으로 해당 엽서의 상태(PostcardStatus)를 변경함.
         * @summary Postcard 상태 업데이트
         * @param {PostcardStatusUpdateRequest} postcardStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostcardStatus: async (postcardStatusUpdateRequest: PostcardStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardStatusUpdateRequest' is not null or undefined
            assertParamExists('updatePostcardStatus', 'postcardStatusUpdateRequest', postcardStatusUpdateRequest)
            const localVarPath = `/postcard/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postcardStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * postcardId를 이용하여 엽서 상태를 반환
         * @summary Postcard 상태 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostcardStatus1: async (postcardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardId' is not null or undefined
            assertParamExists('updatePostcardStatus1', 'postcardId', postcardId)
            const localVarPath = `/postcard/status/{postcardId}`
                .replace(`{${"postcardId"}}`, encodeURIComponent(String(postcardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 받은 엽서 조회를 위한 엽서 사용 및 엽서 상태 (READ)로 변경
         * @summary 엽서 읽기
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usePostcard: async (postcardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcardId' is not null or undefined
            assertParamExists('usePostcard', 'postcardId', postcardId)
            const localVarPath = `/postcard/read/{postcardId}`
                .replace(`{${"postcardId"}}`, encodeURIComponent(String(postcardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostcardControllerApi - functional programming interface
 * @export
 */
export const PostcardControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostcardControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * ACCEPT 엽서의 상대방 정보 조회
         * @summary 상대방 정보 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactInfo(postcardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactInfo(postcardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.getContactInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostcardTypeList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostcardTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostcardTypeList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.getPostcardTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자가 보낸 엽서 조회
         * @summary 보낸 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostcardsFromMember(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberPostcardFromResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPostcardsFromMember(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.readPostcardsFromMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자가 받은 엽서 조회
         * @summary 받은 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostcardsToMember(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberPostcardToResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPostcardsToMember(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.readPostcardsToMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SendPostcardRequest} sendPostcardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPostcard(sendPostcardRequest: SendPostcardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendPostcardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPostcard(sendPostcardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.sendPostcard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostcardSendValidationRequest} postcardSendValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPostcard1(postcardSendValidationRequest: PostcardSendValidationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostcardSendValidateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPostcard1(postcardSendValidationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.sendPostcard1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Body의 postcardId를 가진 엽서의 상태 업데이트. Body의 status 값으로 해당 엽서의 상태(PostcardStatus)를 변경함.
         * @summary Postcard 상태 업데이트
         * @param {PostcardStatusUpdateRequest} postcardStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostcardStatus(postcardStatusUpdateRequest: PostcardStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostcardStatus(postcardStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.updatePostcardStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * postcardId를 이용하여 엽서 상태를 반환
         * @summary Postcard 상태 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostcardStatus1(postcardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostcardStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostcardStatus1(postcardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.updatePostcardStatus1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 받은 엽서 조회를 위한 엽서 사용 및 엽서 상태 (READ)로 변경
         * @summary 엽서 읽기
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usePostcard(postcardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usePostcard(postcardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostcardControllerApi.usePostcard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostcardControllerApi - factory interface
 * @export
 */
export const PostcardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostcardControllerApiFp(configuration)
    return {
        /**
         * ACCEPT 엽서의 상대방 정보 조회
         * @summary 상대방 정보 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactInfo(postcardId: number, options?: any): AxiosPromise<ContactInfoResponse> {
            return localVarFp.getContactInfo(postcardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostcardTypeList(options?: any): AxiosPromise<PostcardTypeResponse> {
            return localVarFp.getPostcardTypeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자가 보낸 엽서 조회
         * @summary 보낸 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostcardsFromMember(options?: any): AxiosPromise<Array<MemberPostcardFromResponse>> {
            return localVarFp.readPostcardsFromMember(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자가 받은 엽서 조회
         * @summary 받은 엽서 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostcardsToMember(options?: any): AxiosPromise<Array<MemberPostcardToResponse>> {
            return localVarFp.readPostcardsToMember(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendPostcardRequest} sendPostcardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcard(sendPostcardRequest: SendPostcardRequest, options?: any): AxiosPromise<SendPostcardResponse> {
            return localVarFp.sendPostcard(sendPostcardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostcardSendValidationRequest} postcardSendValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcard1(postcardSendValidationRequest: PostcardSendValidationRequest, options?: any): AxiosPromise<PostcardSendValidateResponse> {
            return localVarFp.sendPostcard1(postcardSendValidationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Body의 postcardId를 가진 엽서의 상태 업데이트. Body의 status 값으로 해당 엽서의 상태(PostcardStatus)를 변경함.
         * @summary Postcard 상태 업데이트
         * @param {PostcardStatusUpdateRequest} postcardStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostcardStatus(postcardStatusUpdateRequest: PostcardStatusUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updatePostcardStatus(postcardStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * postcardId를 이용하여 엽서 상태를 반환
         * @summary Postcard 상태 조회
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostcardStatus1(postcardId: number, options?: any): AxiosPromise<PostcardStatusResponse> {
            return localVarFp.updatePostcardStatus1(postcardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 받은 엽서 조회를 위한 엽서 사용 및 엽서 상태 (READ)로 변경
         * @summary 엽서 읽기
         * @param {number} postcardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usePostcard(postcardId: number, options?: any): AxiosPromise<void> {
            return localVarFp.usePostcard(postcardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostcardControllerApi - object-oriented interface
 * @export
 * @class PostcardControllerApi
 * @extends {BaseAPI}
 */
export class PostcardControllerApi extends BaseAPI {
    /**
     * ACCEPT 엽서의 상대방 정보 조회
     * @summary 상대방 정보 조회
     * @param {number} postcardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public getContactInfo(postcardId: number, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).getContactInfo(postcardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public getPostcardTypeList(options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).getPostcardTypeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자가 보낸 엽서 조회
     * @summary 보낸 엽서 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public readPostcardsFromMember(options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).readPostcardsFromMember(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자가 받은 엽서 조회
     * @summary 받은 엽서 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public readPostcardsToMember(options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).readPostcardsToMember(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendPostcardRequest} sendPostcardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public sendPostcard(sendPostcardRequest: SendPostcardRequest, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).sendPostcard(sendPostcardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostcardSendValidationRequest} postcardSendValidationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public sendPostcard1(postcardSendValidationRequest: PostcardSendValidationRequest, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).sendPostcard1(postcardSendValidationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Body의 postcardId를 가진 엽서의 상태 업데이트. Body의 status 값으로 해당 엽서의 상태(PostcardStatus)를 변경함.
     * @summary Postcard 상태 업데이트
     * @param {PostcardStatusUpdateRequest} postcardStatusUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public updatePostcardStatus(postcardStatusUpdateRequest: PostcardStatusUpdateRequest, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).updatePostcardStatus(postcardStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * postcardId를 이용하여 엽서 상태를 반환
     * @summary Postcard 상태 조회
     * @param {number} postcardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public updatePostcardStatus1(postcardId: number, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).updatePostcardStatus1(postcardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 받은 엽서 조회를 위한 엽서 사용 및 엽서 상태 (READ)로 변경
     * @summary 엽서 읽기
     * @param {number} postcardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardControllerApi
     */
    public usePostcard(postcardId: number, options?: RawAxiosRequestConfig) {
        return PostcardControllerApiFp(this.configuration).usePostcard(postcardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingControllerApi - axios parameter creator
 * @export
 */
export const SettingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 앱 버전에 대한 정보를 생성 및 수정
         * @summary 현재 버전 정보 생성 API
         * @param {VersionCreateRequest} versionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersion: async (versionCreateRequest: VersionCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionCreateRequest' is not null or undefined
            assertParamExists('createVersion', 'versionCreateRequest', versionCreateRequest)
            const localVarPath = `/settings/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 앱 버전에 대한 정보를 조회
         * @summary 현재 버전 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readVersion: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingControllerApi - functional programming interface
 * @export
 */
export const SettingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 앱 버전에 대한 정보를 생성 및 수정
         * @summary 현재 버전 정보 생성 API
         * @param {VersionCreateRequest} versionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVersion(versionCreateRequest: VersionCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVersion(versionCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingControllerApi.createVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 앱 버전에 대한 정보를 조회
         * @summary 현재 버전 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readVersion(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readVersion(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingControllerApi.readVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingControllerApi - factory interface
 * @export
 */
export const SettingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingControllerApiFp(configuration)
    return {
        /**
         * 앱 버전에 대한 정보를 생성 및 수정
         * @summary 현재 버전 정보 생성 API
         * @param {VersionCreateRequest} versionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersion(versionCreateRequest: VersionCreateRequest, options?: any): AxiosPromise<VersionCreateResponse> {
            return localVarFp.createVersion(versionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 앱 버전에 대한 정보를 조회
         * @summary 현재 버전 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readVersion(options?: any): AxiosPromise<VersionReadResponse> {
            return localVarFp.readVersion(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingControllerApi - object-oriented interface
 * @export
 * @class SettingControllerApi
 * @extends {BaseAPI}
 */
export class SettingControllerApi extends BaseAPI {
    /**
     * 앱 버전에 대한 정보를 생성 및 수정
     * @summary 현재 버전 정보 생성 API
     * @param {VersionCreateRequest} versionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    public createVersion(versionCreateRequest: VersionCreateRequest, options?: RawAxiosRequestConfig) {
        return SettingControllerApiFp(this.configuration).createVersion(versionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 앱 버전에 대한 정보를 조회
     * @summary 현재 버전 정보 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    public readVersion(options?: RawAxiosRequestConfig) {
        return SettingControllerApiFp(this.configuration).readVersion(options).then((request) => request(this.axios, this.basePath));
    }
}



